#Rterm.exe --vanilla
# source("https://raw.githubusercontent.com/johnbwaldron/genes/master/convertGenomicRangeToGeneName")
# look here for ideas: https://support.bioconductor.org/p/67118/

library("reutils")
library(Homo.sapiens)
library(GenomicRanges)
#library(vcfR)


# write.table(GATKcnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/GATKcnv_sample_chr_start_end_del1.dup2_copyNum.txt", row.names=FALSE, sep=",")
# GATKcnv$chr <- paste("chr", GATKcnv$chr, sep="")

# GATKcnv <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/GATKcnv_sample_chr_start_end_del1.dup2_copyNum.txt", sep=",")

################################################################################################################
# formatting XHMM
################################################################################################################
# load and format XHMM results
# df <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/XHMM/DATA.xcnv") # , colClasses = , sep=",""character"

#remove empty rows
# df <- df[-which(df$SAMPLE == ""),]

#create new dataframe with the following columns for each sample: sample, chr, start, end, del_1.dup_2, copyNum
loc <- strsplit(df[,"INTERVAL"], "[:-]")

#if "DUP" -> 2, if "DEL" -> 1 for del_1.dup_2"
df$CNV[which(df$CNV == "DUP")] <- 2 
df$CNV[which(df$CNV == "DEL")] <- 1 

XHMMcnv <- data.frame("sample"= as.character(df$SAMPLE), "chr"= sapply(loc, "[", 1), "start" = as.numeric(sapply(loc, "[", 2)), "end" = as.numeric(sapply(loc, "[", 3)), "del_1.dup_2" = df$CNV, "copyNum" = "NA")
# chromosome format with "chr#"
XHMMcnv$chr <- paste("chr", XHMMcnv$chr, sep="")

#write.table(XHMMcnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/XHMM/XHMMcnv_sample_chr_start_end_del1.dup2_copyNum.txt", row.names=FALSE, sep=",")

# XHMMcnv$sample <- as.character(XHMMcnv$sample)
# XHMMcnv$sample <- sapply(strsplit(XHMMcnv$sample, split='/', fixed=TRUE), function(x) (x[2]))
# XHMMcnv$sample <- sapply(strsplit(XHMMcnv$sample, split='_reorder', fixed=TRUE), function(x) (x[1]))

################################################################################################################
# formatting CANOES
################################################################################################################
# load and format CANOES results

df <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CANOES/afterQCXcnv.csv", sep=",") # , colClasses = , sep=",""character"
colnames(df)[1] <- "SAMPLE"

# simplify sample name to just code
name <- strsplit(df[,"SAMPLE"], "[.]")
df$SAMPLE <- sapply(name, "[", 2)

# read in decoded file where coded bam file name is paired with GELCC family & individual name
decoded <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CANOES/GELLC_Decoded-AllSamples.csv", sep=",") # , colClasses = "character"

# remove .bam from file name to simplify matching
name <- strsplit(decoded[,"file.path"], "[.]")
decoded$file.path <- sapply(name, "[", 1)

# match & replace file code in CANOES results with individual sample name used in XHMM & GATK
for(i in 1:nrow(decoded)){
           df$SAMPLE[which(df$SAMPLE == decoded$file.path[i])] <- decoded$sam[i]
           }

#remove empty rows
# df <- df[-which(df$SAMPLE == ""),]

#create new dataframe with the following columns for each sample: sample, chr, start, end, del_1.dup_2, copyNum
loc <- strsplit(df[,"INTERVAL"], "[:-]")

#if "DUP" -> 2, if "DEL" -> 1 for del_1.dup_2"
df$CNV[which(df$CNV == "DUP")] <- 2 
df$CNV[which(df$CNV == "DEL")] <- 1 

CANOEScnv <- data.frame("sample"= as.character(df$SAMPLE), "chr"= sapply(loc, "[", 1), "start" = as.numeric(sapply(loc, "[", 2)), "end" = as.numeric(sapply(loc, "[", 3)), "del_1.dup_2" = df$CNV, "copyNum" = "NA")
# chromosome format with "chr#"
CANOEScnv$chr <- paste("chr", CANOEScnv$chr, sep="")

#write.table(CANOEScnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CANOES/CANOEScnv_sample_chr_start_end_del1.dup2_copyNum.txt", row.names=FALSE, sep=",")

# XHMMcnv$sample <- as.character(XHMMcnv$sample)
# XHMMcnv$sample <- sapply(strsplit(XHMMcnv$sample, split='/', fixed=TRUE), function(x) (x[2]))
# XHMMcnv$sample <- sapply(strsplit(XHMMcnv$sample, split='_reorder', fixed=TRUE), function(x) (x[1]))



################################################################################################################
#compare CNV calls
################################################################################################################
A <- makeGRangesFromDataFrame(GATKcnv) 
B <- makeGRangesFromDataFrame(XHMMcnv, keep.extra.columns=TRUE)
C <- makeGRangesFromDataFrame(CANOEScnv, keep.extra.columns=TRUE)
olaps <- findOverlaps(A, B)

#olaps is a two-column matrix, indicating which element(s) of A overlap the corresponding elements of B. In the invocation above A and B enter symmetrically, but could be re-ordered if there were restrictions on the type of overlap (argument type, e.g., all of B strictly within A). To find the extent of overlap, I looked at the parallel (element wise) intersection of each overlap

isect <- pintersect(A[queryHits(olaps)], B[subjectHits(olaps)])
isect

# save(isect, olaps, XHMMcnv, GATKcnv, file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/olaps7.2.2020.RData")

# create a data.frame with whatever information needed

data.frame(query=queryHits(olaps), subject=subjectHits(olaps),
           olap_width=width(isect), 
           query_width=width(A)[queryHits(olaps)],
           variantaccession=B$variantaccession[subjectHits(olaps)])
# This will be fast for millions of records in A and B.

# makeGRangesFromDataFrame is available in the current release version of the package, installed by default when using R-3.1. It's easy to make a GRanges 'by hand', e.g.,


A <- with(a, GRanges(Chromosome, IRanges(Start, End)))
B <- with(b, GRanges(chr, IRanges(start, end), variantaccession=variantaccession))
################################################################################################################

XHMMcnvGranges <- makeGRangesFromDataFrame(XHMMcnv, keep.extra.columns=TRUE, seqnames.field = "chr")

GATKcnvGranges <- makeGRangesFromDataFrame(GATKcnv, keep.extra.columns=TRUE, seqnames.field = "chr")

CANOEScnvGranges <- makeGRangesFromDataFrame(CANOEScnv, keep.extra.columns=TRUE, seqnames.field = "chr")


geneRanges <- 
    function(db, column="ENTREZID")
{
    g <- genes(db, columns=column) # , single.strand.genes.only=TRUE
    col <- mcols(g)[[column]]
    genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
    mcols(genes)[[column]] <- as.character(unlist(col))
    genes
}

gns = geneRanges(Homo.sapiens, column="SYMBOL")


####################################################################################################
#Find overlap

splitByOverlap <-
    function(query, subject, column="ENTREZID", ...)
{
    olaps <- findOverlaps(query, subject, ...)
    f1 <- factor(subjectHits(olaps),
                 levels=seq_len(subjectLength(olaps)))
    splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}

####################################################################################################
# splitByOverlap genes by GATKcnvGranges
symInCnv = splitByOverlap(gns, GATKcnvGranges, "SYMBOL")

# splitByOverlap genes by XHMMcnvGranges
symInCnv = splitByOverlap(gns, XHMMcnvGranges, "SYMBOL")

# splitByOverlap genes by CANOEScnvGranges
symInCnv = splitByOverlap(gns, CANOEScnvGranges, "SYMBOL")

#?g <- genes(Homo.sapiens, column="ENTREZID")
#laps <- findOverlaps(g, cnvGranges)
#fa <- factor(subjectHits(laps), levels=seq_len(subjectLength(laps)))
#answer <- splitAsList(mcols(g)[["SYMBOL"]][queryHits(laps)], fa)

# add column to CNV table
GATKcnv$gene <- NA
XHMMcnv$gene <- NA
CANOEScnv$gene <- NA

# GATK - loop through each CNV listed in each table from each algorithm
for(i in 1:nrow(GATKcnv)){
cat("GATKcnv #", i, " covers ", paste(symInCnv[[i]], collapse=", "), "\n")
GATKcnv$gene[i] <- paste(symInCnv[[i]], collapse=", ")
}
# write.table(GATKcnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/GATKcnv_sample_chr_start_end_del1.dup2_copyNum_gene.csv", row.names=FALSE, sep=",") #quote=c(1:3)???

# XHMM - loop through each CNV listed in each table from each algorithm
for(i in 1:nrow(XHMMcnv)){
cat("XHMMcnv #", i, " covers ", paste(symInCnv[[i]], collapse=", "), "\n")
XHMMcnv$gene[i] <- paste(symInCnv[[i]], collapse=", ")
}
# write.table(XHMMcnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/XHMM/XHMMcnv_sample_chr_start_end_del1.dup2_copyNum_gene.txt", row.names=FALSE, sep=",") #quote=c(1:3)???

# CANOES - loop through each CNV listed in each table from each algorithm
for(i in 1:nrow(CANOEScnv)){
cat("CANOEScnv #", i, " covers ", paste(symInCnv[[i]], collapse=", "), "\n")
CANOEScnv$gene[i] <- paste(symInCnv[[i]], collapse=", ")
}
# write.table(CANOEScnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CANOES/CANOEScnv_sample_chr_start_end_del1.dup2_copyNum_gene.txt", row.names=FALSE, sep=",") #quote=c(1:3)???


######################################################################################


# use these gene and GO categories to find genes and GO categories that are enriched in the CNVs but then look below
###########################I think a it would be more telling to identify the overlaps between CNV calls within and between families
###########################quantify the degree of overlap within vs among families 
###########################then classify the genes that show up across families


#maybe use annotatr instead
if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager")
BiocManager::install("annotatr")

library("annotatr")
