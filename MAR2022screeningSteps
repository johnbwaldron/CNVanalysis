#Rterm.exe --vanilla

library(Homo.sapiens)

# load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/overlappingCNVsBothAlgsPhenoFam.12.28.21.rda")
#  load(file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/overlappingCNVsWgnomAD.03.15.22.rda")
olapCNVs <- overlappingCNVs[which(as.numeric(overlappingCNVs$GATKPhred)>19), c(1:15)]

# carry-out comparison of overlap with calls in married ins and with gnomAD calls to the "overlappingCNVs" prior to 
# removing multiple GATK calls overlaping with XHMM calls # i am doing this because identifying overlap with gnomad and married ins, etc is likely influenced by which calls remain. 
# nrow(olapCNVs) vs nrow(overlappingCNVs)
#####################################################################################################################
marriedInSampleName <- familyPhenotypes[familyPhenotypes$CID == 12 & familyPhenotypes$CIND == 44 | familyPhenotypes$CID == 12 & familyPhenotypes$CIND == 29 |
                       familyPhenotypes$CID == 103 & familyPhenotypes$CIND == 117|
                       familyPhenotypes$CID == 25 & familyPhenotypes$CIND == 3|
                       familyPhenotypes$CID == 26 & familyPhenotypes$CIND == 20|
                       familyPhenotypes$CID == 31 & familyPhenotypes$CIND == 5|
                       familyPhenotypes$CID == 33 & familyPhenotypes$CIND == 2|
                       familyPhenotypes$CID == 34 & familyPhenotypes$CIND == 12|
                       familyPhenotypes$CID == 69 & familyPhenotypes$CIND == 112| familyPhenotypes$CID == 69 & familyPhenotypes$CIND == 102 |
                       familyPhenotypes$CID == 90 & familyPhenotypes$CIND == 55 |
                       familyPhenotypes$CID == 135 & familyPhenotypes$CIND == 122 |
                       familyPhenotypes$CID == 35 & familyPhenotypes$CIND == 29| 
                       familyPhenotypes$CID == 47 & familyPhenotypes$CIND == 16|
                       familyPhenotypes$CID == 102 & familyPhenotypes$CIND == 346|
                       familyPhenotypes$CID == 131 &  familyPhenotypes$CIND == 125 |
                       familyPhenotypes$CID == 52 & familyPhenotypes$CIND == 4| familyPhenotypes$CID == 52 & familyPhenotypes$CIND == 13|
                       familyPhenotypes$CID == 88 & familyPhenotypes$CIND == 13| familyPhenotypes$CID == 88 & familyPhenotypes$CIND == 52,1]

delCallsLCfamilies <- olapCNVs[-which(olapCNVs$sample %in% marriedInSampleName),]
delCallsMarriedIn <- olapCNVs[which(olapCNVs$sample %in% marriedInSampleName),]

# save(delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.15.22.allDelCallsLCfamilies.rda")
####
##### use gnomAD deletions and AF to remove common deletions
gnomAD <- read.delim(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/hg19_gnomadSVs.txt")
# limit gnomAD input to deletions
gnomADdels <- gnomAD[grep("DEL", gnomAD$sv_type),] # ### length(grep("DEL", gnomAD$sv_type)) = 169635

myDels <- delCallsLCfamilies
# need to make chr numbers only
l <- strsplit(myDels$chr, "chr") 
numb <- sapply(l, "[", 2)
myDels$chr <- numb

GATKranges <- makeGRangesFromDataFrame(myDels[,c(1:4,7:15)], keep.extra.columns=TRUE) 
XHMMranges <- makeGRangesFromDataFrame(myDels[,c(1:2,5:15)], keep.extra.columns=TRUE) 

# need to have seqnames for GRange object 3 GRanges does not recognize "X.chrom"
colnames(gnomADdels)[1] <- "chr"
gnomADranges <- makeGRangesFromDataFrame(gnomADdels, keep.extra.columns=TRUE)
    
    #overlaps
    GATKxgnomADlaps <- findOverlaps(GATKranges, gnomADranges)
    XHMMxgnomADlaps <- findOverlaps(XHMMranges, gnomADranges)
   #intersection 
   GATKxgnomADsect <- pintersect(GATKranges[queryHits(GATKxgnomADlaps)], gnomADranges[subjectHits(GATKxgnomADlaps)])
   XHMMxgnomADsect <- pintersect(XHMMranges[queryHits(XHMMxgnomADlaps)], gnomADranges[subjectHits(XHMMxgnomADlaps)])
   #union 
    GATKxgnomADunion <- punion(GATKranges[queryHits(GATKxgnomADlaps)], gnomADranges[subjectHits(GATKxgnomADlaps)])
    XHMMxgnomADunion <- punion(XHMMranges[queryHits(XHMMxgnomADlaps)], gnomADranges[subjectHits(XHMMxgnomADlaps)])

XHMMgnomADoverlap <- data.frame(
                sample = XHMMranges$sample[queryHits(XHMMxgnomADlaps)],
                chr = as.data.frame(XHMMranges)$seqnames[queryHits(XHMMxgnomADlaps)],
                start = as.data.frame(XHMMranges)$start[queryHits(XHMMxgnomADlaps)],
                end = as.data.frame(XHMMranges)$end[queryHits(XHMMxgnomADlaps)],
                query=queryHits(XHMMxgnomADlaps), 
                subject=subjectHits(XHMMxgnomADlaps),
                XHMMxgnomAD_sect_width=width(XHMMxgnomADsect),
                XHMMxgnomAD_union_width=width(XHMMxgnomADunion),
                pctOverlap = round(width(XHMMxgnomADsect)/width(XHMMxgnomADunion), 2),
                allele_frequency = as.data.frame(gnomADranges)$allele_frequency[subjectHits(XHMMxgnomADlaps)]
                )

GATKgnomADoverlap <- data.frame(
                        sample = GATKranges$sample[queryHits(GATKxgnomADlaps)],
                        chr = as.data.frame(GATKranges)$seqnames[queryHits(GATKxgnomADlaps)],
                        start = as.data.frame(GATKranges)$start[queryHits(GATKxgnomADlaps)],
                        end = as.data.frame(GATKranges)$end[queryHits(GATKxgnomADlaps)],
                        query=queryHits(GATKxgnomADlaps), 
                        subject=subjectHits(GATKxgnomADlaps),
                        GATKxgnomAD_sect_width=width(GATKxgnomADsect),
                        GATKxgnomAD_union_width=width(GATKxgnomADunion),
                        pctOverlap = round(width(GATKxgnomADsect)/width(GATKxgnomADunion), 2),
                        allele_frequency = as.data.frame(gnomADranges)$allele_frequency[subjectHits(GATKxgnomADlaps)]
                         )
                        
## 3/14/22 I WANT TO GO BACK THROUGH THE QUERY VALUES FROM "myDels OR delCallsLCfamilies" TO ADD THE MAX (ORDER FUNCTION)PCT OVERLAP OF EACH QUERY TO GNOMAD.
# WILL BE ABLE TO DO THE SAME THING FOR MARRIED-INS. THIS WILL WORK BETTER
# AS I LOOP THROUGH THE DATAFRAMES, I MUST EXAM ONLY THOSE THAT ARE > .75 UNION/INTERSECTION AND THEN TAKE MAX ALLELE FREQUENCY

# below creates columns to provide allele frequencies for those with > 70% overlap
delCallsLCfamiliesGnomADolapByAlg <- cbind(delCallsLCfamilies[,c(1:6,11:15)], data.frame(GATKgnomAD70pctOverlapMaxAF = NA, XHMMgnomAD70pctOverlapMaxAF = NA, GATKmarriedInpctOverlapMax = NA, XHMMmarriedInpctOverlapMax = NA))

B <- XHMMgnomADoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap", "allele_frequency")]
                    pctByQueryG70 <- pctByQuery[which(pctByQuery$pctOverlap > 0.7),]
                    topAF <- pctByQueryG70[order(pctByQueryG70$allele_frequency, decreasing = TRUE),2]
                    delCallsLCfamiliesGnomADolapByAlg$XHMMgnomAD70pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (rows in gnomADoverlap)
  
C <- GATKgnomADoverlap
        for(j in unique(C$query)){ # j = unique(C$query)[44] # 
                    pctByQuery <- C[which(C$query==j), c("pctOverlap", "allele_frequency")]
                    pctByQueryG70 <- pctByQuery[which(pctByQuery$pctOverlap > 0.7),]
                    topAF <- pctByQueryG70[order(pctByQueryG70$allele_frequency, decreasing = TRUE),2]
                    delCallsLCfamiliesGnomADolapByAlg$GATKgnomAD70pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (query in gnomADoverlap)
 # save(delCallsLCfamiliesGnomADolapByAlg, delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/03.15.22.delCallsLCfamiliesGnomADolapByAlg.rda")

# below adds a column of AF from gnomAD for those calls with overlap > 75%
LCfamiliesGnomADolapByAlg <- cbind(delCallsLCfamiliesGnomADolapByAlg, data.frame(GATKgnomAD_75pctOverlapMaxAF = NA, XHMMgnomAD_75pctOverlapMaxAF = NA))

B <- XHMMgnomADoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap", "allele_frequency")]
                    pctByQueryG75 <- pctByQuery[which(pctByQuery$pctOverlap > 0.75),]
                    topAF <- pctByQueryG75[order(pctByQueryG75$allele_frequency, decreasing = TRUE),2]
                    LCfamiliesGnomADolapByAlg$XHMMgnomAD_75pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (rows in gnomADoverlap)
  
C <- GATKgnomADoverlap
        for(j in unique(C$query)){ # j = unique(C$query) #j = 3107 # # C$query[which(C[,c("pctOverlap")]>0.75)]
                    pctByQuery <- C[which(C$query==j), c("pctOverlap", "allele_frequency")] 
                    pctByQueryG75 <- pctByQuery[which(pctByQuery$pctOverlap > 0.75),]
                    topAF <- pctByQueryG75[order(pctByQueryG75$allele_frequency, decreasing = TRUE),2]
                    LCfamiliesGnomADolapByAlg$GATKgnomAD_75pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (query in gnomADoverlap)

# save(LCfamiliesGnomADolapByAlg, delCallsLCfamiliesGnomADolapByAlg, delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/03.16.22.overLapByAlg.rda")

# below adds a column of AF from gnomAD for those calls with overlap > 80% 
GnomADolapByAlg <- cbind(LCfamiliesGnomADolapByAlg, data.frame(GATKgnomAD_80pctOverlapMaxAF = NA, XHMMgnomAD_80pctOverlapMaxAF = NA))

B <- XHMMgnomADoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap", "allele_frequency")]
                    pctByQueryG80 <- pctByQuery[which(pctByQuery$pctOverlap > 0.79),]
                    topAF <- pctByQueryG80[order(pctByQueryG80$allele_frequency, decreasing = TRUE),2]
                    GnomADolapByAlg$XHMMgnomAD_80pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (rows in gnomADoverlap)
  
C <- GATKgnomADoverlap
        for(j in unique(C$query)){ # j = unique(C$query) #j = 3107 # # C$query[which(C[,c("pctOverlap")]>0.75)]
                    pctByQuery <- C[which(C$query==j), c("pctOverlap", "allele_frequency")] 
                    pctByQueryG80 <- pctByQuery[which(pctByQuery$pctOverlap > 0.79),]
                    topAF <- pctByQueryG80[order(pctByQueryG80$allele_frequency, decreasing = TRUE),2]
                    GnomADolapByAlg$GATKgnomAD_80pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (query in gnomADoverlap)

save(GnomADolapByAlg, familyPhenotypes, olapCNVs, pheno, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.multiPctOverLapByAlg.rda")

############################################ olaps with Married-Ins ############################################
#already have: GATKranges & XHMMranges
# now need Married-In Ranges: 

# first need to remove "chr" from seqnames in delCallsMarriedIn
l <- strsplit(delCallsMarriedIn$chr, "chr") 
numb <- sapply(l, "[", 2)
delCallsMarriedIn$chr <- numb

B <- makeGRangesFromDataFrame(delCallsMarriedIn[,-c(5,6)], keep.extra.columns=TRUE)

#overlaps
    GATKxMarriedInlaps <- findOverlaps(GATKranges, B)
    XHMMxMarriedInlaps <- findOverlaps(XHMMranges, B)
   #intersection 
   GATKxMarriedInsect <- pintersect(GATKranges[queryHits(GATKxMarriedInlaps)], B[subjectHits(GATKxMarriedInlaps)])
   XHMMxMarriedInsect <- pintersect(XHMMranges[queryHits(XHMMxMarriedInlaps)], B[subjectHits(XHMMxMarriedInlaps)])
   #union 
    GATKxMarriedInunion <- punion(GATKranges[queryHits(GATKxMarriedInlaps)], B[subjectHits(GATKxMarriedInlaps)])
    XHMMxMarriedInunion <- punion(XHMMranges[queryHits(XHMMxMarriedInlaps)], B[subjectHits(XHMMxMarriedInlaps)])

# build data.frame with overlap pct for married ins (GATK calls)
XHMMmarriedINoverlap <- data.frame(
                sample = XHMMranges$sample[queryHits(XHMMxMarriedInlaps)],
                chr = as.data.frame(XHMMranges)$seqnames[queryHits(XHMMxMarriedInlaps)],
                start = as.data.frame(XHMMranges)$start[queryHits(XHMMxMarriedInlaps)],
                end = as.data.frame(XHMMranges)$end[queryHits(XHMMxMarriedInlaps)],
                query=queryHits(XHMMxMarriedInlaps), 
                subject=subjectHits(XHMMxMarriedInlaps),
                XHMMxgnomAD_sect_width=width(XHMMxMarriedInsect),
                XHMMxgnomAD_union_width=width(XHMMxMarriedInunion),
                pctOverlap = round(width(XHMMxMarriedInsect)/width(XHMMxMarriedInunion), 2)
                                )

GATKmarriedINoverlap <- data.frame(
                        sample = GATKranges$sample[queryHits(GATKxMarriedInlaps)],
                        chr = as.data.frame(GATKranges)$seqnames[queryHits(GATKxMarriedInlaps)],
                        start = as.data.frame(GATKranges)$start[queryHits(GATKxMarriedInlaps)],
                        end = as.data.frame(GATKranges)$end[queryHits(GATKxMarriedInlaps)],
                        query=queryHits(GATKxMarriedInlaps), 
                        subject=subjectHits(GATKxMarriedInlaps),
                        GATKxgnomAD_sect_width=width(GATKxMarriedInsect),
                        GATKxgnomAD_union_width=width(GATKxMarriedInunion),
                        pctOverlap = round(width(GATKxMarriedInsect)/width(GATKxMarriedInunion), 2)
                                                 )

# build pct overlap values back into "delCallsLCfamiliesGnomADolapByAlg"
 
B <- XHMMmarriedINoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap")]
                    topPct <- pctByQuery[order(pctByQuery, decreasing = TRUE)]
                    delCallsLCfamiliesGnomADolapByAlg$XHMMmarriedInpctOverlapMax[j] <- as.numeric(topPct[1])
                    
            } # for j (rows in gnomADoverlap)
  
C <- GATKmarriedINoverlap
        for(j in unique(C$query)){ # j = unique(C$query)[44] # 
                   pctByQuery <- C[which(C$query==j), c("pctOverlap")]
                   topPct <- pctByQuery[order(pctByQuery, decreasing = TRUE)]
                   delCallsLCfamiliesGnomADolapByAlg$GATKmarriedInpctOverlapMax[j] <- as.numeric(topPct[1])
                    
            } # for j (query in gnomADoverlap)

# save(delCallsLCfamiliesGnomADolapByAlg, delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/03.15.22.delCallsLCfamiliesGnomADolapANDmarriedINSByAlg.rda")
################################################################################################################################################################################################
# file loaded below (GnomADolapByAlg) has identified gnomAD and Married-In overlap (gnomAD overlap pct > 70%, 75%, 80%) with both GATK and XHMM calls (all Phred > 20)
# load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.multiPctOverLapByAlg.rda")

# find overlap with DGV variants
DGV <- read.delim(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/DGV_GRCh37_hg19_variants_2020-02-25.txt")

DGVloss <- DGV[grep("loss", DGV$variantsubtype),] # ### length(grep("DEL", gnomAD$sv_type)) = 169635
# NO need to remove "chr" from seqnames in DGVloss as in other databases
# remove "chr" from seqnames in delCallsLCfamiliesGnomADolapByAlg

l <- strsplit(delCallsLCfamiliesGnomADolapByAlg$chr, "chr") 
numb <- sapply(l, "[", 2)
delCallsLCfamiliesGnomADolapByAlg$chr <- numb

GATKranges <- makeGRangesFromDataFrame(delCallsLCfamiliesGnomADolapByAlg[,-c(5,6)], keep.extra.columns=TRUE) 
XHMMranges <- makeGRangesFromDataFrame(delCallsLCfamiliesGnomADolapByAlg[,-c(3,4)], keep.extra.columns=TRUE)
B <- makeGRangesFromDataFrame(DGVloss, keep.extra.columns=TRUE)

#### percent overlap between A and B defined by the ratio of the intersection of A and B to the union of A and B.  
#overlaps
    GATKxDGVlaps <- findOverlaps(GATKranges, B)
    XHMMxDGVlaps <- findOverlaps(XHMMranges, B)
   #intersection 
   GATKxDGVsect <- pintersect(GATKranges[queryHits(GATKxDGVlaps)], B[subjectHits(GATKxDGVlaps)])
   XHMMxDGVsect <- pintersect(XHMMranges[queryHits(XHMMxDGVlaps)], B[subjectHits(XHMMxDGVlaps)])
   #union 
    GATKxDGVunion <- punion(GATKranges[queryHits(GATKxDGVlaps)], B[subjectHits(GATKxDGVlaps)])
    XHMMxDGVunion <- punion(XHMMranges[queryHits(XHMMxDGVlaps)], B[subjectHits(XHMMxDGVlaps)])

# build data.frame with overlap pct with DGV (XHMM and GATK calls)
XHMMxDGVoverlap <- data.frame(
                sample = XHMMranges$sample[queryHits(XHMMxDGVlaps)],
                chr = as.data.frame(XHMMranges)$seqnames[queryHits(XHMMxDGVlaps)],
                start = as.data.frame(XHMMranges)$start[queryHits(XHMMxDGVlaps)],
                end = as.data.frame(XHMMranges)$end[queryHits(XHMMxDGVlaps)],
                query=queryHits(XHMMxDGVlaps), 
                subject=subjectHits(XHMMxDGVlaps),
                XHMMxgnomAD_sect_width=width(XHMMxDGVsect),
                XHMMxgnomAD_union_width=width(XHMMxDGVunion),
                pctOverlap = round(width(XHMMxDGVsect)/width(XHMMxDGVunion), 2),
                GELCC_genes = as.data.frame(XHMMranges)$XHMMgene[queryHits(XHMMxDGVlaps)],
                DGV_genes = as.data.frame(B)$genes[subjectHits(XHMMxDGVlaps)],
                DGV_variantaccession = as.data.frame(B)$variantaccession[subjectHits(XHMMxDGVlaps)],
                allele_frequency = as.data.frame(B)$frequency[subjectHits(XHMMxDGVlaps)]
                                )

GATKxDGVoverlap <- data.frame(
                        sample = GATKranges$sample[queryHits(GATKxDGVlaps)],
                        chr = as.data.frame(GATKranges)$seqnames[queryHits(GATKxDGVlaps)],
                        start = as.data.frame(GATKranges)$start[queryHits(GATKxDGVlaps)],
                        end = as.data.frame(GATKranges)$end[queryHits(GATKxDGVlaps)],
                        query=queryHits(GATKxDGVlaps), 
                        subject=subjectHits(GATKxDGVlaps),
                        GATKxgnomAD_sect_width=width(GATKxDGVsect),
                        GATKxgnomAD_union_width=width(GATKxDGVunion),
                        pctOverlap = round(width(GATKxDGVsect)/width(GATKxDGVunion), 2),
                        GELCC_genes = as.data.frame(GATKranges)$GATKgene[queryHits(GATKxDGVlaps)],
                        DGV_genes = as.data.frame(B)$genes[subjectHits(GATKxDGVlaps)],
                        DGV_variantaccession = as.data.frame(B)$variantaccession[subjectHits(GATKxDGVlaps)],
                        allele_frequency = as.data.frame(B)$frequency[subjectHits(GATKxDGVlaps)]
                                 )

# build pct overlap values back into "delCallsLCfamiliesGnomADolapByAlg"
delsLCfamiliesGnomADandDGVolapByAlg <- cbind(delCallsLCfamiliesGnomADolapByAlg, data.frame(GATKxDGVpctOverlap = NA, XHMMxDGVpctOverlap = NA)) 

B <- XHMMxDGVoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap")]
                    topPct <- pctByQuery[order(pctByQuery, decreasing = TRUE)]
                    delsLCfamiliesGnomADandDGVolapByAlg$XHMMxDGVpctOverlap[j] <- as.numeric(topPct[1])
                    
            } # for j (rows in DGV overlap)

# delsLCfamiliesGnomADandDGVolapByAlg$XHMMxDGV70pctOverlapMaxAF[which(!is.na(delsLCfamiliesGnomADandDGVolapByAlg$XHMMxDGV70pctOverlapMaxAF))]

C <- GATKxDGVoverlap
        for(j in unique(C$query)){ # j = unique(C$query)[44] # 
                   pctByQuery <- C[which(B$query==j), c("pctOverlap")]
                   topPct <- pctByQuery[order(pctByQuery, decreasing = TRUE)]
                   delsLCfamiliesGnomADandDGVolapByAlg$GATKxDGVpctOverlap[j] <- as.numeric(topPct[1])
                    
            } # for j (query in gnomADoverlap)

# save(delsLCfamiliesGnomADandDGVolapByAlg, delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.delCallsLCfamiliesGnomADolapANDmarriedINSByAlg.rda")

olapByAlg <- cbind(GnomADolapByAlg, delsLCfamiliesGnomADandDGVolapByAlg[,16:17])
save(olapByAlg, familyPhenotypes, olapCNVs, pheno, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.olapsByAlg.rda")
#####################################################################################################################
#####################################################################################################################
# create table grouped by gene that includes deletions in genes that affect at least 3 individuals.

#load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.olapsByAlg.rda") #olapByAlg

Dels <- vector("list", length = 181)
names(Dels) <- unique(olapByAlg$sample)

for(i in unique(olapByAlg$sample)){ # i = olapByAlg$sample[29]
                g <- unlist(strsplit(olapByAlg$GATKgene[which(olapByAlg$sample==i)], split = ", "))
                x <- unlist(strsplit(olapByAlg$XHMMgene[which(olapByAlg$sample==i)], split = ", "))
                Dels[[i]] <- unique(c(g, x))
                } # in in unique sample name

freq <- table(Reduce(c, Dels))
freqdf <- as.data.frame(freq)
freqdf[,3] <- "Deletions from Both Callers"

genelistG2 <- freqdf[freqdf[,2]>2,]
colnames(genelistG2) <- c("gene", "Freq", "step")

allGenesInG2CIND <- data.frame() 
for (j in 1:length(genelistG2$gene)){    #j=56
      loc <- vector()
      for(i in 1:nrow(olapByAlg)){ # i=1
              g <- unlist(strsplit(olapByAlg$GATKgene[i], split = ", "))
              x <- unlist(strsplit(olapByAlg$XHMMgene[i], split = ", "))
              if (genelistG2$gene[j] %in% unique(c(g, x))){ # which(genelistG2$gene == "CROCC")
                loc <- c(loc, i)}
                          
              } # i
      cat("working on ", as.vector(genelistG2$gene)[j], "\n")

# match sample in olapByAlg (cnvs with only dels, minus married-ins, identified overlap with CNV calls in married ins, DGV, gnomAD, to sample in phenoFam: CID and CIND, "CF", "CM", "diagnosis.of.lung.throat.pharynx.larynx.cancer", "Age.at.Onset.1o.cancer"
      family <- olapByAlg[loc,] 
      for(w in 1:length(family$sample)){    # w = 2
          ind <- which(familyPhenotypes$submitted.sample.id == family$sample[w])
         family[w,"CID"] <- familyPhenotypes[ind, "CID"]
         family[w,"CIND"] <- familyPhenotypes[ind, "CIND"]
         family[w,"CF"] <- familyPhenotypes[ind, "CF"]
         family[w,"CM"] <- familyPhenotypes[ind, "CM"]
         family[w, "SEX"] <- familyPhenotypes[ind, "SEX"]
         family[w,"diagnosis.of.lung.throat.pharynx.larynx.cancer"] <- familyPhenotypes[ind, "diagnosis.of.lung.throat.pharynx.larynx.cancer"]
         family[w,"Age.at.Onset.1o.cancer"] <- familyPhenotypes[ind, "Age.at.Onset.1o.cancer"]
         } # for w
   #label this information with the gene of interest
   family$gene <- genelistG2$gene[j]

allGenesInG2CIND <- rbind(allGenesInG2CIND, family)
            } # j 

# 
write.csv(allGenesInG2CIND, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.allGenesInG2CIND.csv")

######################## 03/17/22 - there are multiple entries for a single individual for a given gene (e.g. multiple GATK calls affecting one gene --> multiple rows for one gene and one individual)
######################## I need to create a version of allGenesInG2CIND that does not inflate the number of genes affected in geneSummary and making the gene list downstream
 noRepeatsAllGenesInG2CIN <- data.frame()
 for(g in unique(allGenesInG2CIND$gene)) { #g = allGenesInG2CIND$gene[64]
      # ID row of any individual listed > 1 time
      subDFwithGene <- allGenesInG2CIND[which(allGenesInG2CIND$gene == g),]
      repeats <- as.data.frame(table(allGenesInG2CIND[which(allGenesInG2CIND$gene == g), 1]))
      for(h in 1:nrow(repeats)){  # h = 12 
                            CIDofgene <- subDFwithGene[which(subDFwithGene[,1] == repeats[h,1]),]
                            Phreds <- as.numeric(CIDofgene[, "GATKPhred"])
                            
                            # adding the top (or only) GATK Phred score for each gene for a single individual to eliminated redundant calls within one CIND
                            noRepeatsAllGenesInG2CIN <- rbind(noRepeatsAllGenesInG2CIN, CIDofgene[order(Phreds, decreasing = TRUE),][1,])           
                            
                            } # for h
                         
      
      } # for g

write.csv(noRepeatsAllGenesInG2CIN, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.noRepeatsallGenesInG2CIND.csv")

# > nrow(allGenesInG2CIND)
# [1] 10805
# > nrow(noRepeatsAllGenesInG2CIN)
# [1] 6279

allGenesInG2CIND <- noRepeatsAllGenesInG2CIN

### running through loops to organize by gene 10/13/21 11:00am - two hours in, still in the genes starting with the letter A.
### closing the R gui window that had a help article sped up the process. 
# def want to save this table to avoid running this again if possible.
# write.csv(allGenesInG2CIND, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/10.13.21.allGenesInG2CIND.csv")
# allGenesInG2CIND <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/10.13.21.allGenesInG2CIND.csv")

# prior to first removing common (AF > 0.05) # save(allGenesInG2CIND, overlappingCNVs, overlappingCNVsPostRemoved, GATKcnv, XHMMcnv, phenoFam, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/10.3.21.upToAllDataOrganizedByGene.rda")
# load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/9.30.21.upToAllDataOrganizedByGene.rda")
#### Now time for branch point - all those genes in 3 families at least 2 individuals per family and those in < 3 families but > 4(3?) individuals per family
# frankly, that (above line) should be easy to subset

############################################################################################################################################################################
delBothCallsLCfamiliesUncommon[which(delBothCallsLCfamiliesUncommon$sample=="H_NK-12GELCC37-12037"),]
############################################################################################################################################################################
# organize to determine how many per family 
geneSummary <- as.data.frame(matrix(nrow=0, ncol=8))
colnames(geneSummary) <- c("gene", "numCIDs", "numCIDs.with.>2ind", "numCINDs", "num_affected", "num_unaffected", "mean_width", "num_unique_widths")

for(i in unique(allGenesInG2CIND$gene)){    #i = cumgFamily$gene[1]
     peeps <- subset(allGenesInG2CIND, allGenesInG2CIND$gene %in% i)
     k=0
     for(j in unique(peeps$CID)) {    #j=peeps$CID[1]
         if(length(which(peeps$CID %in% j))>1){ k=k+1 }
            } # j
     geneSummary <- rbind(geneSummary, data.frame(i, length(unique(peeps$CID)), 
                                         k, length(peeps$CIND), 
                                         length(which(peeps$diagnosis.of.lung.throat.pharynx.larynx.cancer)),
                                         length(which(peeps$diagnosis.of.lung.throat.pharynx.larynx.cancer==FALSE)),
                                         round(mean(as.numeric(peeps$GATKend)-as.numeric(peeps$GATKstart)), 1), 
                                         length(unique(as.numeric(peeps$GATKend)-as.numeric(peeps$GATKstart)))))
     # this could be a great place to use a statistical test of association between Dx and cnv width, CID and CNV width, or                         
     
     cat(i, " has ",  length(unique(peeps$CID)), " CIDs and ", k, " families with > 2 CINDs with this CNV\n")   
     } # i
     colnames(geneSummary) <- c("gene", "numCIDs", "numCIDs.with.>2ind", "numCINDs", "num_affected", "num_unaffected", "mean_width", "num_unique_widths")

write.table(geneSummary, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/statsByGeneMinusRedudantCallsPerCIND.03.17.21.csv", row.names=FALSE, sep =",")                                         

#write.table(geneSummary, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/statsByGene.03.16.21.csv", row.names=FALSE, sep =",")                                         

# write.table(geneSummary, file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/statsByGene.10.1.21.csv", row.names=FALSE, sep =",")                                                                                  
# geneSummary <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/statsByGene.10.1.21.csv")                                         

# now screen out all genes where geneSummary[,2] < 3 | geneSummary[,3] < 3

G2FamiliesWithG2per <- subset(geneSummary, geneSummary[,3] > 2)
G2FamiliesWithG2per <- rbind(G2FamiliesWithG2per, geneSummary[which(geneSummary$gene=="SSX1"),])

write.table(G2FamiliesWithG2per, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.13.21.csv", row.names=FALSE, sep =",") 
# write.table(G2FamiliesWithG2per, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.4.21.csv", row.names=FALSE, sep =",")  
# G2FamiliesWithG2per <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.13.21.csv")

#####################################################################################################################

#####################################################################################################################
# plotting density after screening steps
# load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.olapsByAlg.rda")
# use olapByAlg, geneSummary, for all data and pct overlap
# geneSummary <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/statsByGeneMinusRedudantCallsPerCIND.03.17.21.csv")                                         
# allGenesInG2CIND <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.noRepeatsallGenesInG2CIND.csv")

# create histograms to illustrate changes in number of genes affected by deletions through filtering by values in "delsLCfamiliesGnomADandDGVolapByAlg"

# *1* genesBothCallersAllDeletions
# for each unique sample, list unique gene names
Dels <- vector("list", length = 181)
names(Dels) <- unique(olapByAlg$sample)

for(i in unique(olapByAlg$sample)){ # i = olapByAlg$sample[29]
                g <- unlist(strsplit(olapByAlg$GATKgene[which(olapByAlg$sample==i)], split = ", "))
                x <- unlist(strsplit(olapByAlg$XHMMgene[which(olapByAlg$sample==i)], split = ", "))
                Dels[[i]] <- unique(c(g, x))
                } # in in unique sample name

freq1 <- table(Reduce(c, Dels))
freq1.1 <- as.data.frame(freq1)
freq1.1[,3] <- "Deletions from Both Callers"
colnames(freq1.1 ) <- c("gene", "Freq", "Group")
dens1 <- density(freq1.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

# *2* Greater than 2 Indidivuduals
# allGenesInG2CIND$gene

freq2 <- table(as.vector(allGenesInG2CIND$gene)) # which(allGenesInG2CIND$gene == "AKAP7"
freq2.1 <- as.data.frame(freq2)
freq2.1[,3] <- "Greater than 2 Indidivuduals"
colnames(freq2.1 ) <- c("gene", "Freq", "Group")
dens2 <- density(freq2.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

# *3* "Greater than 2 Families with 2 per Family"
# allGenesInG2CIND$gene
# geneSummary

freq3 <- table(as.vector(allGenesInG2CIND$gene[allGenesInG2CIND$gene %in% geneSummary$gene[which(geneSummary[,3]>2)]]))
freq3.1 <- as.data.frame(freq3)
freq3.1[,3] <- "Greater than 2 Families with 2 per Family"
colnames(freq3.1) <- c("gene", "Freq", "Group")
dens3 <- density(freq3.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

# library(car)
png(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.densityByFilterStep.png")
    plot(dens1, main = "Fig. 2 density of per gene calls for each filter step", col = 1,
    xlim = c(1, 60))
    lines(dens2, col = 2) 
    lines(dens3, col = 3)
    legend("topright", legend = c("Deletions from Both Callers", 
                                 "Greater than 2 Indidivuduals",
                                 "Greater than 2 Families with 2 per Family"
                                 #"Exluding Married-Ins",
                                 #"gnomAD AF < 0.05",
                                 
                                 ),
                                  lty = 1, col = 1:5)
dev.off()

# *4* "Exluding CNVs with 95% overlap with Married-Ins CNVs"
glistG2Fam <- as.vector(allGenesInG2CIND$gene[allGenesInG2CIND$gene %in% geneSummary$gene[which(geneSummary[,3]>2)]])

byAlgG2Fam <- allGenesInG2CIND[allGenesInG2CIND$gene %in% glistG2Fam,]
byAlgG2Fam$GATKmarriedInpctOverlapMax[which(is.na(byAlgG2Fam$GATKmarriedInpctOverlapMax))] <- 0
byAlgG2Fam$XHMMmarriedInpctOverlapMax[which(is.na(byAlgG2Fam$XHMMmarriedInpctOverlapMax))] <- 0
mean(byAlgG2Fam$GATKmarriedInpctOverlapMax)
median(byAlgG2Fam$XHMMmarriedInpctOverlapMax)

# subset byAlgG2Fam (the subset of all CNVs called that are in genes that are affected in > 2 ind in > 2 families) to those CNVs with <80% overlap with married-ins
byAlgG2FamMinusMarriedInCNVs <- subset(byAlgG2Fam, byAlgG2Fam$GATKmarriedInpctOverlapMax < .95)
bothAlgG2FamMinusMarriedInCNVs <- subset(byAlgG2FamMinusMarriedInCNVs, byAlgG2FamMinusMarriedInCNVs$XHMMmarriedInpctOverlapMax < .95)

freq4 <- table(as.vector(bothAlgG2FamMinusMarriedInCNVs$gene))
freq4.1 <- as.data.frame(freq4)
freq4.1[,3] <- "Exluding CNVs with 95% overlap with Married-Ins CNVs"
colnames(freq4.1) <- c("gene", "Freq", "Group")
dens4 <- density(freq4.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

png(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.densityByFilterStep.png")
    plot(dens1, main = "Fig. 2 density of per gene calls for each filter step", col = 1,
    xlim = c(1, 60))
    lines(dens2, col = 2) 
    lines(dens3, col = 3)
    lines(dens4, col = 4) 
    legend("topright", legend = c("Deletions from Both Callers", 
                                 "Greater than 2 Indidivuduals",
                                 "Greater than 2 Families with 2 per Family",
                                 "Exluding CNVs with 95% overlap with Married-Ins CNVs"
                                 #"gnomAD AF < 0.05",
                                 
                                 ),
                                  lty = 1, col = 1:5)
dev.off()

# *5* remove genes with "gnomAD AF > 0.05"
# subset bothAlgG2FamMinusMarriedInCNVs (exludes either GATK or XHMM CNVs with 95% overlap with married in CNVS which is a subset of byAlgG2Fam (the subset of all CNVs called that are in genes that are affected in > 2 ind in > 2 families)

# "GATKgnomAD70pctOverlapMaxAF"
# "XHMMgnomAD70pctOverlapMaxAF"
# "GATKgnomAD_75pctOverlapMaxAF"
# "XHMMgnomAD_75pctOverlapMaxAF"
# "GATKgnomAD_80pctOverlapMaxAF"
# "XHMMgnomAD_80pctOverlapMaxAF"

# length(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF[which(!is.na(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF))])
# length(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_80pctOverlapMaxAF[which(!is.na(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_80pctOverlapMaxAF))])
# length(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_75pctOverlapMaxAF[which(!is.na(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_75pctOverlapMaxAF))])
# length(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_75pctOverlapMaxAF[which(!is.na(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_75pctOverlapMaxAF))])

#replace NA (no overlap) with AF of 0
bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF[which(is.na(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF))] <- 0
bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_80pctOverlapMaxAF[which(is.na(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_80pctOverlapMaxAF))] <- 0
# length(which(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF < .05)) # length(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF)
# length(which(G2FamMinusMarriedInCNVsAFL5Pct$XHMMgnomAD_80pctOverlapMaxAF < .05))

G2FamMinusMarriedInCNVsAFL5Pct <- subset(bothAlgG2FamMinusMarriedInCNVs, bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF < .05)
bothAlgG2FamMinusMarriedInCNVsAFL5Pct <- subset(G2FamMinusMarriedInCNVsAFL5Pct, G2FamMinusMarriedInCNVsAFL5Pct$XHMMgnomAD_80pctOverlapMaxAF < .05)

freq5 <- table(as.vector(bothAlgG2FamMinusMarriedInCNVsAFL5Pct$gene))
freq5.1 <- as.data.frame(freq5)
freq5.1[,3] <- "80% overlap gnomAD AF < 0.05"
colnames(freq5.1) <- c("gene", "Freq", "Group")
dens5 <- density(freq5.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

# *6* remove genes with "removed CNVs with DGV overlap > 80%"
# bothAlgG2FamMinusMarriedInCNVsAFL5Pct

#replace NA (no overlap) with AF of 0
bothAlgG2FamMinusMarriedInCNVsAFL5Pct$GATKxDGVpctOverlap[which(is.na(bothAlgG2FamMinusMarriedInCNVsAFL5Pct$GATKxDGVpctOverlap))] <- 0
bothAlgG2FamMinusMarriedInCNVsAFL5Pct$XHMMxDGVpctOverlap[which(is.na(bothAlgG2FamMinusMarriedInCNVsAFL5Pct$XHMMxDGVpctOverlap))] <- 0

selected <- subset(bothAlgG2FamMinusMarriedInCNVsAFL5Pct, bothAlgG2FamMinusMarriedInCNVsAFL5Pct$XHMMxDGVpctOverlap < .80) #  nrow(bothAlgG2FamMinusMarriedInCNVsAFL5Pct) = 1879; nrow(selected) = 736
dun <- subset(selected, selected$XHMMxDGVpctOverlap < .80) 
# length(unique(dun$gene)) = 115

freq6 <- table(as.vector(dun$gene))
freq6.1 <- as.data.frame(freq5)
freq6.1[,3] <- "removed DGV overlap > 80%"
colnames(freq6.1) <- c("gene", "Freq", "Group")
dens6 <- density(freq5.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])


# install.packages("car")
library(car)

png(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.18.22.densityByFilterStep.png")
    plot(dens1, main = "Fig. 2 density of per gene calls for each filter step", col = 1,
    xlim = c(1, 60))
    lines(dens2, col = 2) 
    lines(dens3, col = 3)
    lines(dens4, col = 4) 
    lines(dens5, col = 7)
    #lines(dens6, col = 8)
    legend("topright", legend = c("Deletions from Both Callers", 
                                 "Greater than 2 Indidivuduals",
                                 "Greater than 2 Families with 2 per Family",
                                 "Exluding CNVs overlapping with nonrelative CNVs",
                                 "Exluding 80% overlap gnomAD AF > 0.05"
                                 #"Exluding DGV overlap > 80%"
                                                                 ),
                                  lty = 1, col = c(1:4,7:8))
dev.off()
#####################################################################################################################


df <- rbind(freq1.1, freq2.1, freq3.1, freq4.1, freq5)

############## SORVA!!!!!!!!!!!!!!!!!!!!!
G2FamiliesWithG2per <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.13.21.csv")

geneListwithCoordinates <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListwithCoordinates1.31.22.csv")

#freq5.1[,1][freq5.1[,1] %in% geneListwithCoordinates[,1]]
#geneListwithCoordinates[,1][geneListwithCoordinates[,1] %in% freq5.1[,1]]

write.csv(geneSummary[geneSummary[,1] %in% freq6.1[,1],c(1:6)], file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListAfter6Screens.csv", row.names=FALSE)
# above list used for SORVA 3/17/22

# Need to add  unrelated affecteds for each gene
# = number affected that are not in the same family

# dun$gene[unique(dun$gene) %in% freq6.1[,1]]

# freq6.1[freq6.1[,1] %in% unique(dun$gene),]

geneSummary
sorva <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/SORVA-geneListAfter6Screens.csv - Sheet1.csv")
colnames(sorva)[7:8] <- c("PctPop", "pVal")

screen6 <- sorva[sorva$gene %in% unique(dun$gene),]  

screen7 <- screen6[which(screen6$reaches.genome.wide.significance),]
# this <- screen7[which(as.numeric(screen7$PctPop) > 0),]
old9 <- c("KIR2DL1", "ADAM3A", "DMBT1", "GOLGA8B", "PTPN20", "HNRNPCL1", "SIRPB1", "LILRA6", "HLA-DRB5")

# screen7[screen7 %in% old9,] = none- none of the 9 described genes from prior poster are in list of significant genes

this <- screen7[order(as.numeric(screen7$pVal)),]
# nrow(this) = 45
this[,c("gene","pVal")]

#save(this, screen7, screen6, geneSummary, sorva, dun, freq1, freq2, freq3, freq4, freq5, freq6, file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/convenientGeneLists.03.18.22.csv")
# load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/convenientGeneLists.03.18.22.csv")

# write.csv(this, file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListForLitSearch.03.18.22.csv", row.names=FALSE)

# geneSummary[which(geneSummary$gene == "SSX1"),]

# 03/18/22 list of genes post screening with genome wide significance without pseudogenes and Olfactory Receptors, created from "this" above (file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListForLitSearch.03.18.22.csv")
sum <- read.csv(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListForLitSearch.03.18.22.csv - Sheet1.csv")
###############################################################
# literature search
#install.packages("reutils") # see: https://github.com/gschofl/reutils or see: https://www.rdocumentation.org/packages/reutils/versions/0.2.2/topics/reutils
# > install.packages("devtools")
#  Rterm.exe --vanilla
require("devtools")
install_github("gschofl/reutils")
library("reutils")


# library(Homo.sapiens)
glist <- sum

#esearch a database to acquire UIDs --> LIST DATABASES: einfo()
for(i in glist$gene){ # i = glist$gene[22]
    gid <- esearch(paste(paste(i,"[GENE]", sep=""), "human[ORGN]", sep=" AND "), db = "gene")
    s <- esummary(uid(gid), db = "gene")
   
   ## try this means of parsing rather than all the acrobatics below?
       ##entrezContent <- content(s, as = "parsed")
       ##entrezSummary <- lapply(entrezContent, '[', "Summary")
   
   if(is.data.frame(content(s, "parsed"))){  
          entrezGeneSummary <- content(s, "parsed")$Summary 
          entrezGeneSummary <- paste(entrezGeneSummary, collapse = "--")
          if("NA" %in% entrezGeneSummary){entrezGeneSummary <- content(s, "parsed")$Description}# doesn't work with formatting for a number of the genes
     } else if (length(content(s, "parsed"))>0){
             entrezGeneSummary <- content(s, "parsed")[[1]]$Summary
             entrezGeneSummary <- paste(entrezGeneSummary, collapse = "--")
             if("NA" %in% entrezGeneSummary){entrezGeneSummary <- content(s, "parsed")[[1]]$Description}
    }   else {  entrezGeneSummary <- "gene not found in genbank"}
        dex = which(glist$gene==i)
    glist[dex,"Summary"]<- entrezGeneSummary
    
    # pubmeds with gene 
        numb <- esearch(i, db = "pubmed", rettype = "count", field = NULL)
        glist[dex,"pubmed.gene"] <- content(numb, "parsed")
    Sys.sleep(5)
    # pubmeds with gene AND cancer
        numb <- esearch(paste(i, "cancer", sep=" AND "), db = "pubmed", rettype = "count")   
        glist[dex,"pubmed.cancerGene"] <- content(numb, "parsed")
        
       #keep getting "Warning: HTTP error: Status 429; Too Many Requests" b/c NCBI limits to 3 requests/s (10 with API key, see above)
       # short cut: have R stop for a second every three requests (esearch)
        Sys.sleep(5)
       
    # pubmeds with gene AND cancer AND prostate
        numb <- esearch(paste(i, "cancer", "(lung OR airway)", sep=" AND "), db = "pubmed", rettype = "count")
        glist[dex,"pubmed.lungCancerGene"] <- content(numb, "parsed")
    
    # NOW ADD TITLES FROM PUBMED FOR prostateCancerGene or then geneCancer or then gene IF > 0
        # search query format: (GSTM1) AND cancer AND ("2018"[Date - Publication] : "3000"[Date - Publication]) 
        #dateRange = paste('(2017[Date - Publication] : 3000[Date - Publication])')
            dateRange = ""
        if(glist[dex,"pubmed.lungCancerGene"]>1){   
           pmid <- esearch(paste(i, "cancer", "(lung OR airway)", dateRange, sep=" AND "), retmax = 5, db = "pubmed", rettype = "uilist")
            s <- esummary(uid(pmid), db = "pubmed")
            pmContent <- content(s, as = "parsed")
            pmTitles <- lapply(pmContent, '[', "Title")
            # combine into a single string
            titleString <- paste(unlist(pmTitles), sep = '----', collapse = '___')
            glist[dex,"Titles"]<- titleString
            
        }else if(!is.na(glist[dex,"pubmed.cancerGene"])){   
            
            pmid <- esearch(paste(i, "cancer", dateRange, sep=" AND "), retmax = 5, db = "pubmed", rettype = "uilist")
            s <- esummary(uid(pmid), db = "pubmed")
            pmContent <- content(s, as = "parsed")
            pmTitles <- lapply(pmContent, '[', "Title")
            # combine into a single string
            titleString <- paste(unlist(pmTitles), sep = '----', collapse = '___')
            glist[dex,"Titles"]<- titleString
            
        }else if(glist[dex,"pubmed.gene"]>0){
            pmid <- esearch(i, retmax = 5, db = "pubmed", rettype = "uilist")
            s <- esummary(uid(pmid), db = "pubmed")
            pmContent <- content(s, as = "parsed")
            pmTitles <- lapply(pmContent, '[', "Title")
            # combine into a single string
            titleString <- paste(unlist(pmTitles), sep = '', collapse = '___')
            glist[dex,"Titles"]<- titleString
        }
        Sys.sleep(5)
    }

write.csv(glist, file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListWithLitSearch.03.18.22.csv", row.names=FALSE)

