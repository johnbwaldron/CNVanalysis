#Rterm.exe --vanilla

library(Homo.sapiens)

# load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/overlappingCNVsBothAlgsPhenoFam.12.28.21.rda")
#  load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/overlappingCNVsWgnomAD.03.15.22.rda")
olapCNVs <- overlappingCNVs[which(as.numeric(overlappingCNVs$GATKPhred)>19), c(1:15)]

##############################
#### 3/29/22 
# finding overlaps between GATK and XHMM. I am concerned that all the work done below and that relies on the overalp of the two discovery
# algorithms is using only a very small number of XHMM segments, maybe even matching any individual to any other individual. HOWEVER, after looking to 
# the code for overlap between algorithms (johnbwaldron/CNVanalysis/blob/main/curateCNVsForLinkageAnalysis line 214) does one sample at a time.

#load all raw CNVs called for GATK and XHMM: 
# load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/XHMMcnvAndGATKcnvWithQAandQSwithFamilyPhenotypeUpdate12.28.21.rda")
head(GATKcnv)
head(XHMMcnv)


##################################
# limit overlapping CNVs to those with 01% intersection/union

# start by converting values to numeric
overlappingCNVs$GATKend <- as.numeric(overlappingCNVs$GATKend)
overlappingCNVs$XHMMend <- as.numeric(overlappingCNVs$XHMMend)
overlappingCNVs$GATKstart <- as.numeric(overlappingCNVs$GATKstart)
overlappingCNVs$XHMMstart <- as.numeric(overlappingCNVs$XHMMstart)


unions <- vector()
intersections <- vector()

for(i in 1:nrow(overlappingCNVs)){ # i = 42
  union = max(overlappingCNVs$XHMMend[i], overlappingCNVs$GATKend[i]) - min(overlappingCNVs$XHMMstart[i], overlappingCNVs$GATKstart[i]) 
  sect = min(overlappingCNVs$XHMMend[i], overlappingCNVs$GATKend[i]) - max(overlappingCNVs$XHMMstart[i], overlappingCNVs$GATKstart[i])
  
  unions <- c(unions, union)
  intersections <- c(intersections, sect)
  }
  
  # length(which(intersections/unions > .01))
  
  #limit "overlapping CNVs" to those with 1% overlap
  overlappingCNVs <- subset(overlappingCNVs, intersections/unions > .01)
  
  mean(intersections/unions, na.rm=TRUE)
  max(intersections/unions, na.rm=TRUE)
  min(intersections/unions, na.rm=TRUE) # = .01 by definition
  ##########################################################################################
  # graph overlap
  ################################################################
  perc <- intersections/unions # length(perc)
  
aG <- length(which(perc < .25))/length(perc)

bG <- length(which(perc > .25 & perc < .5))/length(perc)

cG <- length(which(perc > .5 & perc < .75))/length(perc)

dG <- length(which(perc > .75))/length(perc)

library("stringr")

stars <- matrix(nrow = 1, ncol = 4, data = c(aG, bG, cG, dG), byrow = TRUE,
          dimnames = list(rows=c("intersection/union"), columns = c("< 25%", "25-50%", "50-75%", "75-100%")))
png(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/04.11.22.overlapSizeComparison.png")
barplot (stars, main = str_wrap("Fig. 2 depicts the distribution of percent overlap (intersection/union) between 
        XHMM and GATK inferred deletions. Most deletions overlap by less than 25% due to multiple GATK calls that 
        fall within a single XHMM call.", width = 60), ylim = c(0, 0.8), space = c(0,.1),
            col = c("light blue", "blue"), beside=TRUE, legend.text = FALSE)
 dev.off()


 ##########################################################################################
#Rterm.exe --vanilla


# illustrate overlap ################### save(overlappingCNVs, file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/overlappingCNVs.04.14.22.rda") # after removing Phred < 20 and only including those with >1% overlap between algorithms
#  load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/overlappingCNVs.04.14.22.rda")
library(Homo.sapiens)
library(Gviz)
library("stringr") 

 #######################
cdsRanges <- 
    function(db, column="ENTREZID")
{
    c <- cds(db, columns=column) 
    col <- mcols(c)[[column]]
    CDS <- granges(c)[rep(seq_along(c), elementNROWS(col))]
    mcols(CDS)[[column]] <- as.character(unlist(col))
    CDS
}
 #######################
gns = cdsRanges(Homo.sapiens, column="SYMBOL")

overlappingCNVs[abs(overlappingCNVs$GATKstart - overlappingCNVs$XHMMstart) < 200,c(1:6,8)]
overlappingCNVs[overlappingCNVs$sample == "H_NK-135GELCC148-135148" & overlappingCNVs$chr == "chr19",]

glist <- c("SULT1A1", "MRC1", "FCGR3B", "KIR2DL1", "CDK11A", "ACOT1", "KLRC2", "NAIP", "RMND5A")
# overlappingCNVs[overlappingCNVs$XHMMgene %in% glist,c(1:6,8:10,13)]

 gen = "hg19"

chr = "chr10"

CIND = "H_NK-88GELCC28-88028"
ss <- overlappingCNVs[overlappingCNVs$sample == CIND & overlappingCNVs$chr==chr,] 
subject = names(table(ss$subject)[table(ss$subject) == max(table(ss$subject))])

segs <- data.frame(chr=chr, start = c(ss$GATKstart[ss$subject==subject], ss$XHMMstart[ss$subject==subject][1]), 
        end = c(ss$GATKend[ss$subject==subject],ss$XHMMend[ss$subject==subject][1]), 
        caller =  c(rep("GATK", length(ss$GATKstart[ss$subject==subject])), "XHMM"))
 
trns <- as.data.frame(gns)
trns <- trns[trns$seqnames == chr ,]
trns <- trns[(trns$start > (min(segs$start)-5000) & trns$start < (max(segs$end)+5000)) | 
            (trns$end > (min(segs$start)-5000) & trns$end < (max(segs$end)+5000)), ]
trns <- trns[!is.na(trns$SYMBOL),]

genes <- GeneRegionTrack(makeGRangesFromDataFrame(trns), genome = gen, name="MRC1 Exons", showId=FALSE, transcript = trns$SYMBOL, 
          strand=trns$strand) #  geneSymbol=FALSE, transcript=, , transcriptAnnotation = "symbol"


 
t <- AnnotationTrack(segs, name = "Inferred Deletions", 
        genome="hg19", chromosome=chr, id=segs$caller, showFeatureId=TRUE) # group=segs$caller, ,
 g <- GenomeAxisTrack()
 i <- IdeogramTrack(genome = "hg19", chromosome = chr)

png(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/04.14.22.IllustrateOverlappingNatureTwoCallers.png", width = 800)

plotTracks(list(t, genes, g, i), main = str_wrap("Fig. 3 illustrates the typical overlapping nature of CNVs inferred by the independent CNV discovery algorithms, within one individual family member.", width = 120),
           cex.main=1, fontface.main=2, col.main="black", sizes=c(8,5,5,2), extend.left = 0.1, extend.right = 0.1) #  
 
 dev.off()


########################################################################################## 
# CNV burdern and affected status

##########################################################################################
################### characterize the raw calls
# FIRST subset to deletions!!!
XHMMcnv <- subset(XHMMcnv, XHMMcnv$del_1.dup_2 == 1) # nrow(XHMMcnv) = 11550 --> 5673
GATKcnv <- subset(GATKcnv, GATKcnv$del_1.dup_2 == 1) # nrow(GATKcnv) = 89054 --> 29206

# second subset to phred > 19

XHMMpA <- subset(XHMMcnv, XHMMcnv$PhredAllPtsAgree > 19) # nrow(XHMMpA) = 5673 --> 2311
GATKpA <- subset(GATKcnv, GATKcnv$PhredAllPtsAgree > 19) # nrow(GATKpA) = 29206 --> 21107

# vs. PhredMinOnePtAgrees

XHMMoA <- subset(XHMMcnv, XHMMcnv$PhredMinOnePtAgrees > 19) # nrow(XHMMoA) = 5673 --> 5673
GATKoA <- subset(GATKcnv, GATKcnv$PhredMinOnePtAgrees > 19) # nrow(GATKoA) = 29206 --> 21457

# screening by PhredMinOnePtAgrees reduces XHMM calls by half, but reduces GATK calls by only 300 out of 21,457

# calculate mean, median, mode, SD, range of CNVs and deletions per individual after screening for deletions and phred one pt agrees >= 20
XHMMperCIND <- data.frame()
GATKperCIND <- data.frame()
oXHMMuniqueDels <- vector()
oGATKuniqueDels <- vector()

for(i in familyPhenotypes$submitted.sample.id){ # i = familyPhenotypes$submitted.sample.id [12] # familyPhenotypes$submitted.sample.id %in% XHMMcnv$sample
                    
          XHMMsize <- XHMMoA$end[XHMMoA$sample == i] -  XHMMoA$start[XHMMoA$sample == i]
          XHMMsizekb <- XHMMsize/1000

          GATKsize <- GATKoA$end[GATKoA$sample == i] - GATKoA$start[GATKoA$sample == i]
          GATKsizekb <- GATKsize/1000
         
          oXHMMsize <- (as.numeric(unique(overlappingCNVs$XHMMend[overlappingCNVs$sample == i])) - as.numeric(unique(overlappingCNVs$XHMMstart[overlappingCNVs$sample == i])))/1000
          oGATKsize <- (as.numeric(unique(overlappingCNVs$GATKend[overlappingCNVs$sample == i])) - as.numeric(unique(overlappingCNVs$GATKstart[overlappingCNVs$sample == i])))/1000
          
          oXHMMuniqueDels <- c(oXHMMuniqueDels, oXHMMsize)
          oGATKuniqueDels <- c(oGATKuniqueDels, oGATKsize)
          
          XHMMperCIND <- rbind(XHMMperCIND, data.frame(sample = i, numCNVs =  length(XHMMsizekb), meanWidth = round(mean(XHMMsizekb), 2), 
                              medianWidth = round(median(XHMMsizekb), 2), SDwidth = round(sd(XHMMsizekb), 2), maxWidth = round(max(XHMMsizekb), 2), minWidth = round(min(XHMMsizekb), 2),
                              olap.numCNVs = length(oXHMMsize), olap.meanWidth = round(mean(oXHMMsize), 2), olap.SDwidth = round(sd(oXHMMsize), 2), olap.maxWidth = round(max(oXHMMsize), 2), olap.minWidth = round(min(oXHMMsize), 2))
                               )
          GATKperCIND <- rbind(GATKperCIND, data.frame(sample = i, numCNVs = length(GATKsizekb), meanWidth = round(mean(GATKsizekb), 2), 
                              medianWidth = round(median(GATKsizekb), 2), SDwidth = round(sd(GATKsizekb), 2), maxWidth = round(max(GATKsizekb), 2), 
                              minWidth = round(min(GATKsizekb), 2),
                              olap.numCNVs = length(oGATKsize), olap.meanWidth = round(mean(oGATKsize), 2), olap.SDwidth = round(sd(oGATKsize), 2), olap.maxWidth = round(max(oGATKsize), 2), olap.minWidth = round(min(oGATKsize), 2)
                              )
                              )
                    }
          
          mean(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)])
          mean(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)])
          mean(XHMMoA$end - XHMMoA$start)
          mean(GATKoA$end - GATKoA$start)

#summaryDels <- data.frame(XHMM = c(nrow(XHMMoA), round(mean(XHMMoA$end - XHMMoA$start)/1000, 2), round(sd((XHMMoA$end - XHMMoA$start)/1000), 2), 
 #                         paste(round(max(XHMMoA$end - XHMMoA$start)/1000,2), "kb - ", min(XHMMoA$end - XHMMoA$start), "bp", sep = "") , 
  #                        round(mean(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)]), 2), round(sd(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)]), 2), 
#                          paste(max(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)]), min(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)]), sep=" - "),
#                          
#                          sum(XHMMperCIND$olap.numCNVs), round(mean(XHMMperCIND$olap.meanWidth, na.rm=TRUE), 2), sd(oXHMMuniqueDels, na.rm = TRUE), 
#                          paste(round(max(oXHMMuniqueDels),2), "kb - ", min(oXHMMuniqueDels)*1000, "bp", sep = "") , 
#                          round(mean(XHMMperCIND$olap.numCNVs[which(XHMMperCIND$olap.numCNVs>0)]), 2), round(sd(XHMMperCIND$olap.numCNVs[which(XHMMperCIND$olap.numCNVs>0)]), 2), 
#                          paste(max(XHMMperCIND$olap.numCNVs[which(XHMMperCIND$olap.numCNVs>0)]), min(XHMMperCIND$olap.numCNVs[which(XHMMperCIND$olap.numCNVs>0)]), sep=" - ")
#                          ), 
                          
#                          GATK =  c(nrow(GATKoA), round(mean(GATKoA$end - GATKoA$start)/1000, 2), round(sd((GATKoA$end - GATKoA$start)/1000), 2), 
#                          paste(round(max(GATKoA$end - GATKoA$start)/1000,2), "kb - ", min(GATKoA$end - GATKoA$start), "bp", sep = ""), 
#                          round(mean(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)]), 2), round(sd(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)]), 2), 
#                          paste(max(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)]), min(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)]), sep=" - "),
#                          
#                          sum(GATKperCIND$olap.numCNVs), round(mean(GATKperCIND$olap.meanWidth, na.rm=TRUE), 2), sd(oGATKuniqueDels, na.rm = TRUE), 
#                          paste(round(max(oGATKuniqueDels)/1000,2), "kb - ", min(oGATKuniqueDels)*1000, "bp", sep = ""), 
#                          round(mean(GATKperCIND$olap.numCNVs[which(GATKperCIND$olap.numCNVs>0)]), 2), round(sd(GATKperCIND$olap.numCNVs[which(GATKperCIND$olap.numCNVs>0)]), 2), 
#                          paste(max(GATKperCIND$olap.numCNVs[which(GATKperCIND$olap.numCNVs>0)]), min(GATKperCIND$olap.numCNVs[which(GATKperCIND$olap.numCNVs>0)]), sep=" - ")
#                          ), 
                          
#                          rows = c("Total number of deletions", "Mean width (kb)", "standard deviation", "Range (kb)", "Mean number of deletions", 
#                          "standard deviation", "Range (deletions)", 
#                          "Total deletions", "Mean width (kb)", "standard deviation", "Range", "Mean number of deletions", 
#                          "standard deviation", "Range (deletions)") )

### using cbind instead
XHMM = c(nrow(XHMMoA), round(mean(XHMMoA$end - XHMMoA$start)/1000, 2), round(sd((XHMMoA$end - XHMMoA$start)/1000), 2), 
                          paste(round(max(XHMMoA$end - XHMMoA$start)/1000,2), "kb - ", min(XHMMoA$end - XHMMoA$start), "bp", sep = "") , 
                          round(mean(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)]), 2), round(sd(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)]), 2), 
                          paste(max(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)]), min(XHMMperCIND$numCNVs[which(XHMMperCIND$numCNVs>0)]), sep=" - "),
                          
                          sum(XHMMperCIND$olap.numCNVs), round(mean(XHMMperCIND$olap.meanWidth, na.rm=TRUE), 2), round(sd(oXHMMuniqueDels, na.rm = TRUE), 2), 
                          paste(round(max(oXHMMuniqueDels, na.rm=TRUE),2), "kb - ", min(oXHMMuniqueDels, na.rm=TRUE)*1000, "bp", sep = "") , 
                          round(mean(XHMMperCIND$olap.numCNVs[which(XHMMperCIND$olap.numCNVs>0)]), 2), round(sd(XHMMperCIND$olap.numCNVs[which(XHMMperCIND$olap.numCNVs>0)]), 2), 
                          paste(max(XHMMperCIND$olap.numCNVs[which(XHMMperCIND$olap.numCNVs>0)]), min(XHMMperCIND$olap.numCNVs[which(XHMMperCIND$olap.numCNVs>0)]), sep=" - ")
                          ) 
                          
GATK =  c(nrow(GATKoA), round(mean(GATKoA$end - GATKoA$start)/1000, 2), round(sd((GATKoA$end - GATKoA$start)/1000), 2), 
                          paste(round(max(GATKoA$end - GATKoA$start)/1000,2), "kb - ", min(GATKoA$end - GATKoA$start), "bp", sep = ""), 
                          round(mean(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)]), 2), round(sd(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)]), 2), 
                          paste(max(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)]), min(GATKperCIND$numCNVs[which(GATKperCIND$numCNVs>0)]), sep=" - "),
                          
                          sum(GATKperCIND$olap.numCNVs), round(mean(GATKperCIND$olap.meanWidth, na.rm=TRUE), 2), round(sd(oGATKuniqueDels, na.rm = TRUE), 2), 
                          paste(round(max(oGATKuniqueDels, na.rm=TRUE)/1000,2), "kb - ", min(oGATKuniqueDels, na.rm=TRUE)*1000, "bp", sep = ""), 
                          round(mean(GATKperCIND$olap.numCNVs[which(GATKperCIND$olap.numCNVs>0)]), 2), round(sd(GATKperCIND$olap.numCNVs[which(GATKperCIND$olap.numCNVs>0)]), 2), 
                          paste(max(GATKperCIND$olap.numCNVs[which(GATKperCIND$olap.numCNVs>0)]), min(GATKperCIND$olap.numCNVs[which(GATKperCIND$olap.numCNVs>0)]), sep=" - ")
                          )
                          
 rows = c("Total number of deletions", "Mean width (kb)", "standard deviation", "Range (kb)", "Mean number of deletions", 
                          "standard deviation", "Range (deletions)", 
                          "Total deletions", "Mean width (kb)", "standard deviation", "Range", "Mean number of deletions", 
                          "standard deviation", "Range (deletions)")

summaryDels <- as.data.frame(cbind(rows, XHMM, GATK))

# save (summaryDels, file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/summaryDels.04.11.22.rda")
# load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/summaryDels.04.11.22.rda")

############ table of CNV stats
#install.packages("gt") 
# install.packages("webshot")
# webshot::install_phantomjs()

library(webshot)
library(gt)
# help = https://gt.rstudio.com/articles/intro-creating-gt-tables.html

      gt_tbl <- gt(summaryDels, rowname_col = "rows")
      tbl <- gt_tbl %>%
                    tab_header(title = "Table 2. Comparison of deletion calls by algorithm and individual. XHMM demonstrated a tendency to make fewer calls of larger size. GATK tended to make more calls that generally fall within segments identified as deletions by XHMM.",
                       ) %>%
                       opt_align_table_header(align = "left") %>%
                   tab_row_group(
                              label = "Only overlapping calls from both algorithms",
                              rows = 8:14) %>% 
                   tab_row_group(
                              label = "Values per sampled individual",
                              rows = 5:7) %>%
                   tab_row_group(
                              label = "Values for all sampled individuals",
                              rows = 1:4)                          
                             
tab <- tbl %>% tab_options(heading.title.font.size = 16, container.width = 800, data_row.padding.horizontal = 50,
                      column_labels.padding.horizontal = 50,column_labels.font.weight = "bold", table_body.vlines.width = 2)

 # %>% cell_borders(sides = "all", color = "black", style = "solid", weight = px(1))

gtsave(tab,
    "4.18.22.RawAndOverlappingSummaryStatsXHMMandGATK.png", expand = 10,
    path = "C:/Users/4wald/OneDrive - LSUHSC/GELCC"
  )
  
  
  
  #### graph sizes
  
  XHMMsize <- XHMMcnv$end -  XHMMcnv$start 
  GATKsize <- GATKcnv$end - GATKcnv$start

aG <- length(which(GATKsize < 1000))/length(GATKsize)
aX <- length(which(XHMMsize < 1000))/length(XHMMsize)

bG <- length(which(GATKsize < 100000 & GATKsize > 1000))/length(GATKsize)
bX <- length(which(XHMMsize < 100000 & XHMMsize > 1000))/length(XHMMsize)

cG <- length(which(GATKsize > 100000 & GATKsize < 1000000))/length(GATKsize)
cX <- length(which(XHMMsize > 100000 & XHMMsize < 1000000))/length(XHMMsize)

dG <- length(which(GATKsize > 1000000))/length(GATKsize)
dX <- length(which(XHMMsize > 1000000))/length(XHMMsize)


stars <- matrix(nrow = 2, ncol = 4, data = c(aX, bX, cX, dX, aG, bG, cG, dG), byrow = TRUE,
          dimnames = list(rows=c("XHMM", "GATK4"), columns = c("< 1kb", "1 - 100kb", "100kb - 1Mb", "> 1Mb")))
png(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.29.22.callSizeComparison.png")
barplot (stars, main = "Fig. 1 size distribution of XHMM and GATK inferred deletions", space = c(0,.1),
            col = c("light blue", "blue"), beside=TRUE, legend.text = TRUE)
 dev.off()
 mean(XHMMsizekb) # = 85.063 kb
 sd(XHMMsizekb) # = 335.0416 
 mean(GATKsizekb) # = 8.871 kb 
 sd(GATKsizekb) # = 34.271         
 ##############################




# - compare the above loaded file which was used for 
# analysis below with "10.19.21.compositeOfCNVsCalledByGATKandXHMM.csv" from (https://github.com/johnbwaldron/CNVanalysis/blob/main/characterizeCNVcalls)
# which is - calls with > 75% overlap ::: #  overlappingCNVs <- read.csv(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/10.19.21.compositeOfCNVsCalledByGATKandXHMM.csv")
# either way, i could just use the coordinates available to calculation intersection/union for GATK and XHMM and eliminate those that don't meet criteria.
##############################

# carry-out comparison of overlap with calls in married ins and with gnomAD calls to the "overlappingCNVs" prior to 
# removing multiple GATK calls overlaping with XHMM calls # i am doing this because identifying overlap with gnomad and married ins, etc is likely influenced by which calls remain. 
# nrow(olapCNVs) vs nrow(overlappingCNVs)
#####################################################################################################################
marriedInSampleName <- familyPhenotypes[familyPhenotypes$CID == 12 & familyPhenotypes$CIND == 44 | familyPhenotypes$CID == 12 & familyPhenotypes$CIND == 29 |
                       familyPhenotypes$CID == 103 & familyPhenotypes$CIND == 117|
                       familyPhenotypes$CID == 25 & familyPhenotypes$CIND == 3|
                       familyPhenotypes$CID == 26 & familyPhenotypes$CIND == 20|
                       familyPhenotypes$CID == 31 & familyPhenotypes$CIND == 5|
                       familyPhenotypes$CID == 33 & familyPhenotypes$CIND == 2|
                       familyPhenotypes$CID == 34 & familyPhenotypes$CIND == 12|
                       familyPhenotypes$CID == 69 & familyPhenotypes$CIND == 112| familyPhenotypes$CID == 69 & familyPhenotypes$CIND == 102 |
                       familyPhenotypes$CID == 90 & familyPhenotypes$CIND == 55 |
                       familyPhenotypes$CID == 135 & familyPhenotypes$CIND == 122 |
                       familyPhenotypes$CID == 35 & familyPhenotypes$CIND == 29| 
                       familyPhenotypes$CID == 47 & familyPhenotypes$CIND == 16|
                       familyPhenotypes$CID == 102 & familyPhenotypes$CIND == 346|
                       familyPhenotypes$CID == 131 &  familyPhenotypes$CIND == 125 |
                       familyPhenotypes$CID == 52 & familyPhenotypes$CIND == 4| familyPhenotypes$CID == 52 & familyPhenotypes$CIND == 13|
                       familyPhenotypes$CID == 88 & familyPhenotypes$CIND == 13| familyPhenotypes$CID == 88 & familyPhenotypes$CIND == 52,1]

delCallsLCfamilies <- olapCNVs[-which(olapCNVs$sample %in% marriedInSampleName),]
delCallsMarriedIn <- olapCNVs[which(olapCNVs$sample %in% marriedInSampleName),]

# save(delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.15.22.allDelCallsLCfamilies.rda")
####
##### use gnomAD deletions and AF to remove common deletions
gnomAD <- read.delim(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/hg19_gnomadSVs.txt")
# limit gnomAD input to deletions
gnomADdels <- gnomAD[grep("DEL", gnomAD$sv_type),] # ### length(grep("DEL", gnomAD$sv_type)) = 169635

myDels <- delCallsLCfamilies
# need to make chr numbers only
l <- strsplit(myDels$chr, "chr") 
numb <- sapply(l, "[", 2)
myDels$chr <- numb

GATKranges <- makeGRangesFromDataFrame(myDels[,c(1:4,7:15)], keep.extra.columns=TRUE) 
XHMMranges <- makeGRangesFromDataFrame(myDels[,c(1:2,5:15)], keep.extra.columns=TRUE) 

# need to have seqnames for GRange object 3 GRanges does not recognize "X.chrom"
colnames(gnomADdels)[1] <- "chr"
gnomADranges <- makeGRangesFromDataFrame(gnomADdels, keep.extra.columns=TRUE)
    
    #overlaps
    GATKxgnomADlaps <- findOverlaps(GATKranges, gnomADranges)
    XHMMxgnomADlaps <- findOverlaps(XHMMranges, gnomADranges)
   #intersection 
   GATKxgnomADsect <- pintersect(GATKranges[queryHits(GATKxgnomADlaps)], gnomADranges[subjectHits(GATKxgnomADlaps)])
   XHMMxgnomADsect <- pintersect(XHMMranges[queryHits(XHMMxgnomADlaps)], gnomADranges[subjectHits(XHMMxgnomADlaps)])
   #union 
    GATKxgnomADunion <- punion(GATKranges[queryHits(GATKxgnomADlaps)], gnomADranges[subjectHits(GATKxgnomADlaps)])
    XHMMxgnomADunion <- punion(XHMMranges[queryHits(XHMMxgnomADlaps)], gnomADranges[subjectHits(XHMMxgnomADlaps)])

XHMMgnomADoverlap <- data.frame(
                sample = XHMMranges$sample[queryHits(XHMMxgnomADlaps)],
                chr = as.data.frame(XHMMranges)$seqnames[queryHits(XHMMxgnomADlaps)],
                start = as.data.frame(XHMMranges)$start[queryHits(XHMMxgnomADlaps)],
                end = as.data.frame(XHMMranges)$end[queryHits(XHMMxgnomADlaps)],
                query=queryHits(XHMMxgnomADlaps), 
                subject=subjectHits(XHMMxgnomADlaps),
                XHMMxgnomAD_sect_width=width(XHMMxgnomADsect),
                XHMMxgnomAD_union_width=width(XHMMxgnomADunion),
                pctOverlap = round(width(XHMMxgnomADsect)/width(XHMMxgnomADunion), 2),
                allele_frequency = as.data.frame(gnomADranges)$allele_frequency[subjectHits(XHMMxgnomADlaps)]
                )

GATKgnomADoverlap <- data.frame(
                        sample = GATKranges$sample[queryHits(GATKxgnomADlaps)],
                        chr = as.data.frame(GATKranges)$seqnames[queryHits(GATKxgnomADlaps)],
                        start = as.data.frame(GATKranges)$start[queryHits(GATKxgnomADlaps)],
                        end = as.data.frame(GATKranges)$end[queryHits(GATKxgnomADlaps)],
                        query=queryHits(GATKxgnomADlaps), 
                        subject=subjectHits(GATKxgnomADlaps),
                        GATKxgnomAD_sect_width=width(GATKxgnomADsect),
                        GATKxgnomAD_union_width=width(GATKxgnomADunion),
                        pctOverlap = round(width(GATKxgnomADsect)/width(GATKxgnomADunion), 2),
                        allele_frequency = as.data.frame(gnomADranges)$allele_frequency[subjectHits(GATKxgnomADlaps)]
                         )
                        
## 3/14/22 I WANT TO GO BACK THROUGH THE QUERY VALUES FROM "myDels OR delCallsLCfamilies" TO ADD THE MAX (ORDER FUNCTION)PCT OVERLAP OF EACH QUERY TO GNOMAD.
# WILL BE ABLE TO DO THE SAME THING FOR MARRIED-INS. THIS WILL WORK BETTER
# AS I LOOP THROUGH THE DATAFRAMES, I MUST EXAM ONLY THOSE THAT ARE > .75 UNION/INTERSECTION AND THEN TAKE MAX ALLELE FREQUENCY

# below creates columns to provide allele frequencies for those with > 70% overlap
delCallsLCfamiliesGnomADolapByAlg <- cbind(delCallsLCfamilies[,c(1:6,11:15)], data.frame(GATKgnomAD70pctOverlapMaxAF = NA, XHMMgnomAD70pctOverlapMaxAF = NA, GATKmarriedInpctOverlapMax = NA, XHMMmarriedInpctOverlapMax = NA))

B <- XHMMgnomADoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap", "allele_frequency")]
                    pctByQueryG70 <- pctByQuery[which(pctByQuery$pctOverlap > 0.7),]
                    topAF <- pctByQueryG70[order(pctByQueryG70$allele_frequency, decreasing = TRUE),2]
                    delCallsLCfamiliesGnomADolapByAlg$XHMMgnomAD70pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (rows in gnomADoverlap)
  
C <- GATKgnomADoverlap
        for(j in unique(C$query)){ # j = unique(C$query)[44] # 
                    pctByQuery <- C[which(C$query==j), c("pctOverlap", "allele_frequency")]
                    pctByQueryG70 <- pctByQuery[which(pctByQuery$pctOverlap > 0.7),]
                    topAF <- pctByQueryG70[order(pctByQueryG70$allele_frequency, decreasing = TRUE),2]
                    delCallsLCfamiliesGnomADolapByAlg$GATKgnomAD70pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (query in gnomADoverlap)
 # save(delCallsLCfamiliesGnomADolapByAlg, delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/03.15.22.delCallsLCfamiliesGnomADolapByAlg.rda")

# below adds a column of AF from gnomAD for those calls with overlap > 75%
LCfamiliesGnomADolapByAlg <- cbind(delCallsLCfamiliesGnomADolapByAlg, data.frame(GATKgnomAD_75pctOverlapMaxAF = NA, XHMMgnomAD_75pctOverlapMaxAF = NA))

B <- XHMMgnomADoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap", "allele_frequency")]
                    pctByQueryG75 <- pctByQuery[which(pctByQuery$pctOverlap > 0.75),]
                    topAF <- pctByQueryG75[order(pctByQueryG75$allele_frequency, decreasing = TRUE),2]
                    LCfamiliesGnomADolapByAlg$XHMMgnomAD_75pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (rows in gnomADoverlap)
  
C <- GATKgnomADoverlap
        for(j in unique(C$query)){ # j = unique(C$query) #j = 3107 # # C$query[which(C[,c("pctOverlap")]>0.75)]
                    pctByQuery <- C[which(C$query==j), c("pctOverlap", "allele_frequency")] 
                    pctByQueryG75 <- pctByQuery[which(pctByQuery$pctOverlap > 0.75),]
                    topAF <- pctByQueryG75[order(pctByQueryG75$allele_frequency, decreasing = TRUE),2]
                    LCfamiliesGnomADolapByAlg$GATKgnomAD_75pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (query in gnomADoverlap)

# save(LCfamiliesGnomADolapByAlg, delCallsLCfamiliesGnomADolapByAlg, delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/03.16.22.overLapByAlg.rda")

# below adds a column of AF from gnomAD for those calls with overlap > 80% 
GnomADolapByAlg <- cbind(LCfamiliesGnomADolapByAlg, data.frame(GATKgnomAD_80pctOverlapMaxAF = NA, XHMMgnomAD_80pctOverlapMaxAF = NA))

B <- XHMMgnomADoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap", "allele_frequency")]
                    pctByQueryG80 <- pctByQuery[which(pctByQuery$pctOverlap > 0.79),]
                    topAF <- pctByQueryG80[order(pctByQueryG80$allele_frequency, decreasing = TRUE),2]
                    GnomADolapByAlg$XHMMgnomAD_80pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (rows in gnomADoverlap)
  
C <- GATKgnomADoverlap
        for(j in unique(C$query)){ # j = unique(C$query) #j = 3107 # # C$query[which(C[,c("pctOverlap")]>0.75)]
                    pctByQuery <- C[which(C$query==j), c("pctOverlap", "allele_frequency")] 
                    pctByQueryG80 <- pctByQuery[which(pctByQuery$pctOverlap > 0.79),]
                    topAF <- pctByQueryG80[order(pctByQueryG80$allele_frequency, decreasing = TRUE),2]
                    GnomADolapByAlg$GATKgnomAD_80pctOverlapMaxAF[j] <- as.numeric(topAF[1])
                    
            } # for j (query in gnomADoverlap)

save(GnomADolapByAlg, familyPhenotypes, olapCNVs, pheno, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.multiPctOverLapByAlg.rda")

############################################ olaps with Married-Ins ############################################
#already have: GATKranges & XHMMranges
# now need Married-In Ranges: 

# first need to remove "chr" from seqnames in delCallsMarriedIn
l <- strsplit(delCallsMarriedIn$chr, "chr") 
numb <- sapply(l, "[", 2)
delCallsMarriedIn$chr <- numb

B <- makeGRangesFromDataFrame(delCallsMarriedIn[,-c(5,6)], keep.extra.columns=TRUE)

#overlaps
    GATKxMarriedInlaps <- findOverlaps(GATKranges, B)
    XHMMxMarriedInlaps <- findOverlaps(XHMMranges, B)
   #intersection 
   GATKxMarriedInsect <- pintersect(GATKranges[queryHits(GATKxMarriedInlaps)], B[subjectHits(GATKxMarriedInlaps)])
   XHMMxMarriedInsect <- pintersect(XHMMranges[queryHits(XHMMxMarriedInlaps)], B[subjectHits(XHMMxMarriedInlaps)])
   #union 
    GATKxMarriedInunion <- punion(GATKranges[queryHits(GATKxMarriedInlaps)], B[subjectHits(GATKxMarriedInlaps)])
    XHMMxMarriedInunion <- punion(XHMMranges[queryHits(XHMMxMarriedInlaps)], B[subjectHits(XHMMxMarriedInlaps)])

# build data.frame with overlap pct for married ins (GATK calls)
XHMMmarriedINoverlap <- data.frame(
                sample = XHMMranges$sample[queryHits(XHMMxMarriedInlaps)],
                chr = as.data.frame(XHMMranges)$seqnames[queryHits(XHMMxMarriedInlaps)],
                start = as.data.frame(XHMMranges)$start[queryHits(XHMMxMarriedInlaps)],
                end = as.data.frame(XHMMranges)$end[queryHits(XHMMxMarriedInlaps)],
                query=queryHits(XHMMxMarriedInlaps), 
                subject=subjectHits(XHMMxMarriedInlaps),
                XHMMxgnomAD_sect_width=width(XHMMxMarriedInsect),
                XHMMxgnomAD_union_width=width(XHMMxMarriedInunion),
                pctOverlap = round(width(XHMMxMarriedInsect)/width(XHMMxMarriedInunion), 2)
                                )

GATKmarriedINoverlap <- data.frame(
                        sample = GATKranges$sample[queryHits(GATKxMarriedInlaps)],
                        chr = as.data.frame(GATKranges)$seqnames[queryHits(GATKxMarriedInlaps)],
                        start = as.data.frame(GATKranges)$start[queryHits(GATKxMarriedInlaps)],
                        end = as.data.frame(GATKranges)$end[queryHits(GATKxMarriedInlaps)],
                        query=queryHits(GATKxMarriedInlaps), 
                        subject=subjectHits(GATKxMarriedInlaps),
                        GATKxgnomAD_sect_width=width(GATKxMarriedInsect),
                        GATKxgnomAD_union_width=width(GATKxMarriedInunion),
                        pctOverlap = round(width(GATKxMarriedInsect)/width(GATKxMarriedInunion), 2)
                                                 )

# build pct overlap values back into "delCallsLCfamiliesGnomADolapByAlg"
 
B <- XHMMmarriedINoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap")]
                    topPct <- pctByQuery[order(pctByQuery, decreasing = TRUE)]
                    delCallsLCfamiliesGnomADolapByAlg$XHMMmarriedInpctOverlapMax[j] <- as.numeric(topPct[1])
                    
            } # for j (rows in gnomADoverlap)
  
C <- GATKmarriedINoverlap
        for(j in unique(C$query)){ # j = unique(C$query)[44] # 
                   pctByQuery <- C[which(C$query==j), c("pctOverlap")]
                   topPct <- pctByQuery[order(pctByQuery, decreasing = TRUE)]
                   delCallsLCfamiliesGnomADolapByAlg$GATKmarriedInpctOverlapMax[j] <- as.numeric(topPct[1])
                    
            } # for j (query in gnomADoverlap)

# save(delCallsLCfamiliesGnomADolapByAlg, delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/03.15.22.delCallsLCfamiliesGnomADolapANDmarriedINSByAlg.rda")
################################################################################################################################################################################################
# file loaded below (GnomADolapByAlg) has identified gnomAD and Married-In overlap (gnomAD overlap pct > 70%, 75%, 80%) with both GATK and XHMM calls (all Phred > 20)
# load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.multiPctOverLapByAlg.rda")

# find overlap with DGV variants
DGV <- read.delim(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/DGV_GRCh37_hg19_variants_2020-02-25.txt")

DGVloss <- DGV[grep("loss", DGV$variantsubtype),] # ### length(grep("DEL", gnomAD$sv_type)) = 169635
# NO need to remove "chr" from seqnames in DGVloss as in other databases
# remove "chr" from seqnames in delCallsLCfamiliesGnomADolapByAlg

l <- strsplit(delCallsLCfamiliesGnomADolapByAlg$chr, "chr") 
numb <- sapply(l, "[", 2)
delCallsLCfamiliesGnomADolapByAlg$chr <- numb

GATKranges <- makeGRangesFromDataFrame(delCallsLCfamiliesGnomADolapByAlg[,-c(5,6)], keep.extra.columns=TRUE) 
XHMMranges <- makeGRangesFromDataFrame(delCallsLCfamiliesGnomADolapByAlg[,-c(3,4)], keep.extra.columns=TRUE)
B <- makeGRangesFromDataFrame(DGVloss, keep.extra.columns=TRUE)

#### percent overlap between A and B defined by the ratio of the intersection of A and B to the union of A and B.  
#overlaps
    GATKxDGVlaps <- findOverlaps(GATKranges, B)
    XHMMxDGVlaps <- findOverlaps(XHMMranges, B)
   #intersection 
   GATKxDGVsect <- pintersect(GATKranges[queryHits(GATKxDGVlaps)], B[subjectHits(GATKxDGVlaps)])
   XHMMxDGVsect <- pintersect(XHMMranges[queryHits(XHMMxDGVlaps)], B[subjectHits(XHMMxDGVlaps)])
   #union 
    GATKxDGVunion <- punion(GATKranges[queryHits(GATKxDGVlaps)], B[subjectHits(GATKxDGVlaps)])
    XHMMxDGVunion <- punion(XHMMranges[queryHits(XHMMxDGVlaps)], B[subjectHits(XHMMxDGVlaps)])

# build data.frame with overlap pct with DGV (XHMM and GATK calls)
XHMMxDGVoverlap <- data.frame(
                sample = XHMMranges$sample[queryHits(XHMMxDGVlaps)],
                chr = as.data.frame(XHMMranges)$seqnames[queryHits(XHMMxDGVlaps)],
                start = as.data.frame(XHMMranges)$start[queryHits(XHMMxDGVlaps)],
                end = as.data.frame(XHMMranges)$end[queryHits(XHMMxDGVlaps)],
                query=queryHits(XHMMxDGVlaps), 
                subject=subjectHits(XHMMxDGVlaps),
                XHMMxgnomAD_sect_width=width(XHMMxDGVsect),
                XHMMxgnomAD_union_width=width(XHMMxDGVunion),
                pctOverlap = round(width(XHMMxDGVsect)/width(XHMMxDGVunion), 2),
                GELCC_genes = as.data.frame(XHMMranges)$XHMMgene[queryHits(XHMMxDGVlaps)],
                DGV_genes = as.data.frame(B)$genes[subjectHits(XHMMxDGVlaps)],
                DGV_variantaccession = as.data.frame(B)$variantaccession[subjectHits(XHMMxDGVlaps)],
                allele_frequency = as.data.frame(B)$frequency[subjectHits(XHMMxDGVlaps)]
                                )

GATKxDGVoverlap <- data.frame(
                        sample = GATKranges$sample[queryHits(GATKxDGVlaps)],
                        chr = as.data.frame(GATKranges)$seqnames[queryHits(GATKxDGVlaps)],
                        start = as.data.frame(GATKranges)$start[queryHits(GATKxDGVlaps)],
                        end = as.data.frame(GATKranges)$end[queryHits(GATKxDGVlaps)],
                        query=queryHits(GATKxDGVlaps), 
                        subject=subjectHits(GATKxDGVlaps),
                        GATKxgnomAD_sect_width=width(GATKxDGVsect),
                        GATKxgnomAD_union_width=width(GATKxDGVunion),
                        pctOverlap = round(width(GATKxDGVsect)/width(GATKxDGVunion), 2),
                        GELCC_genes = as.data.frame(GATKranges)$GATKgene[queryHits(GATKxDGVlaps)],
                        DGV_genes = as.data.frame(B)$genes[subjectHits(GATKxDGVlaps)],
                        DGV_variantaccession = as.data.frame(B)$variantaccession[subjectHits(GATKxDGVlaps)],
                        allele_frequency = as.data.frame(B)$frequency[subjectHits(GATKxDGVlaps)]
                                 )

# build pct overlap values back into "delCallsLCfamiliesGnomADolapByAlg"
delsLCfamiliesGnomADandDGVolapByAlg <- cbind(delCallsLCfamiliesGnomADolapByAlg, data.frame(GATKxDGVpctOverlap = NA, XHMMxDGVpctOverlap = NA)) 

B <- XHMMxDGVoverlap

        for(j in unique(B$query)){ # j = unique(B$query)[42] # 
                    pctByQuery <- B[which(B$query==j), c("pctOverlap")]
                    topPct <- pctByQuery[order(pctByQuery, decreasing = TRUE)]
                    delsLCfamiliesGnomADandDGVolapByAlg$XHMMxDGVpctOverlap[j] <- as.numeric(topPct[1])
                    
            } # for j (rows in DGV overlap)

# delsLCfamiliesGnomADandDGVolapByAlg$XHMMxDGV70pctOverlapMaxAF[which(!is.na(delsLCfamiliesGnomADandDGVolapByAlg$XHMMxDGV70pctOverlapMaxAF))]

C <- GATKxDGVoverlap
        for(j in unique(C$query)){ # j = unique(C$query)[44] # 
                   pctByQuery <- C[which(B$query==j), c("pctOverlap")]
                   topPct <- pctByQuery[order(pctByQuery, decreasing = TRUE)]
                   delsLCfamiliesGnomADandDGVolapByAlg$GATKxDGVpctOverlap[j] <- as.numeric(topPct[1])
                    
            } # for j (query in gnomADoverlap)

# save(delsLCfamiliesGnomADandDGVolapByAlg, delCallsLCfamilies, delCallsMarriedIn, familyPhenotypes, olapCNVs, pheno, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.delCallsLCfamiliesGnomADolapANDmarriedINSByAlg.rda")

olapByAlg <- cbind(GnomADolapByAlg, delsLCfamiliesGnomADandDGVolapByAlg[,16:17])
save(olapByAlg, familyPhenotypes, olapCNVs, pheno, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.olapsByAlg.rda")
#####################################################################################################################
#####################################################################################################################
# create table grouped by gene that includes deletions in genes that affect at least 3 individuals.

#load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.olapsByAlg.rda") #olapByAlg

Dels <- vector("list", length = 181)
names(Dels) <- unique(olapByAlg$sample)

for(i in unique(olapByAlg$sample)){ # i = olapByAlg$sample[29]
                g <- unlist(strsplit(olapByAlg$GATKgene[which(olapByAlg$sample==i)], split = ", "))
                x <- unlist(strsplit(olapByAlg$XHMMgene[which(olapByAlg$sample==i)], split = ", "))
                Dels[[i]] <- unique(c(g, x))
                } # in in unique sample name

freq <- table(Reduce(c, Dels))
freqdf <- as.data.frame(freq)
freqdf[,3] <- "Deletions from Both Callers"

genelistG2 <- freqdf[freqdf[,2]>2,]
colnames(genelistG2) <- c("gene", "Freq", "step")

allGenesInG2CIND <- data.frame() 
for (j in 1:length(genelistG2$gene)){    #j=56
      loc <- vector()
      for(i in 1:nrow(olapByAlg)){ # i=1
              g <- unlist(strsplit(olapByAlg$GATKgene[i], split = ", "))
              x <- unlist(strsplit(olapByAlg$XHMMgene[i], split = ", "))
              if (genelistG2$gene[j] %in% unique(c(g, x))){ # which(genelistG2$gene == "CROCC")
                loc <- c(loc, i)}
                          
              } # i
      cat("working on ", as.vector(genelistG2$gene)[j], "\n")

# match sample in olapByAlg (cnvs with only dels, minus married-ins, identified overlap with CNV calls in married ins, DGV, gnomAD, to sample in phenoFam: CID and CIND, "CF", "CM", "diagnosis.of.lung.throat.pharynx.larynx.cancer", "Age.at.Onset.1o.cancer"
      family <- olapByAlg[loc,] 
      for(w in 1:length(family$sample)){    # w = 2
          ind <- which(familyPhenotypes$submitted.sample.id == family$sample[w])
         family[w,"CID"] <- familyPhenotypes[ind, "CID"]
         family[w,"CIND"] <- familyPhenotypes[ind, "CIND"]
         family[w,"CF"] <- familyPhenotypes[ind, "CF"]
         family[w,"CM"] <- familyPhenotypes[ind, "CM"]
         family[w, "SEX"] <- familyPhenotypes[ind, "SEX"]
         family[w,"diagnosis.of.lung.throat.pharynx.larynx.cancer"] <- familyPhenotypes[ind, "diagnosis.of.lung.throat.pharynx.larynx.cancer"]
         family[w,"Age.at.Onset.1o.cancer"] <- familyPhenotypes[ind, "Age.at.Onset.1o.cancer"]
         } # for w
   #label this information with the gene of interest
   family$gene <- genelistG2$gene[j]

allGenesInG2CIND <- rbind(allGenesInG2CIND, family)
            } # j 

# 
write.csv(allGenesInG2CIND, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.allGenesInG2CIND.csv")

######################## 03/17/22 - there are multiple entries for a single individual for a given gene (e.g. multiple GATK calls affecting one gene --> multiple rows for one gene and one individual)
######################## I need to create a version of allGenesInG2CIND that does not inflate the number of genes affected in geneSummary and making the gene list downstream
 noRepeatsAllGenesInG2CIN <- data.frame()
 for(g in unique(allGenesInG2CIND$gene)) { #g = allGenesInG2CIND$gene[64]
      # ID row of any individual listed > 1 time
      subDFwithGene <- allGenesInG2CIND[which(allGenesInG2CIND$gene == g),]
      repeats <- as.data.frame(table(allGenesInG2CIND[which(allGenesInG2CIND$gene == g), 1]))
      for(h in 1:nrow(repeats)){  # h = 12 
                            CIDofgene <- subDFwithGene[which(subDFwithGene[,1] == repeats[h,1]),]
                            Phreds <- as.numeric(CIDofgene[, "GATKPhred"])
                            
                            # adding the top (or only) GATK Phred score for each gene for a single individual to eliminated redundant calls within one CIND
                            noRepeatsAllGenesInG2CIN <- rbind(noRepeatsAllGenesInG2CIN, CIDofgene[order(Phreds, decreasing = TRUE),][1,])           
                            
                            } # for h
                         
      
      } # for g

write.csv(noRepeatsAllGenesInG2CIN, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.noRepeatsallGenesInG2CIND.csv")

# > nrow(allGenesInG2CIND)
# [1] 10805
# > nrow(noRepeatsAllGenesInG2CIN)
# [1] 6279

allGenesInG2CIND <- noRepeatsAllGenesInG2CIN

### running through loops to organize by gene 10/13/21 11:00am - two hours in, still in the genes starting with the letter A.
### closing the R gui window that had a help article sped up the process. 
# def want to save this table to avoid running this again if possible.
# write.csv(allGenesInG2CIND, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/10.13.21.allGenesInG2CIND.csv")
# allGenesInG2CIND <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/10.13.21.allGenesInG2CIND.csv")

# prior to first removing common (AF > 0.05) # save(allGenesInG2CIND, overlappingCNVs, overlappingCNVsPostRemoved, GATKcnv, XHMMcnv, phenoFam, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/10.3.21.upToAllDataOrganizedByGene.rda")
# load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/9.30.21.upToAllDataOrganizedByGene.rda")
#### Now time for branch point - all those genes in 3 families at least 2 individuals per family and those in < 3 families but > 4(3?) individuals per family
# frankly, that (above line) should be easy to subset

############################################################################################################################################################################
delBothCallsLCfamiliesUncommon[which(delBothCallsLCfamiliesUncommon$sample=="H_NK-12GELCC37-12037"),]
############################################################################################################################################################################
# organize to determine how many per family 
geneSummary <- as.data.frame(matrix(nrow=0, ncol=8))
colnames(geneSummary) <- c("gene", "numCIDs", "numCIDs.with.>2ind", "numCINDs", "num_affected", "num_unaffected", "mean_width", "num_unique_widths")

for(i in unique(allGenesInG2CIND$gene)){    #i = cumgFamily$gene[1]
     peeps <- subset(allGenesInG2CIND, allGenesInG2CIND$gene %in% i)
     k=0
     for(j in unique(peeps$CID)) {    #j=peeps$CID[1]
         if(length(which(peeps$CID %in% j))>1){ k=k+1 }
            } # j
     geneSummary <- rbind(geneSummary, data.frame(i, length(unique(peeps$CID)), 
                                         k, length(peeps$CIND), 
                                         length(which(peeps$diagnosis.of.lung.throat.pharynx.larynx.cancer)),
                                         length(which(peeps$diagnosis.of.lung.throat.pharynx.larynx.cancer==FALSE)),
                                         round(mean(as.numeric(peeps$GATKend)-as.numeric(peeps$GATKstart)), 1), 
                                         length(unique(as.numeric(peeps$GATKend)-as.numeric(peeps$GATKstart)))))
     # this could be a great place to use a statistical test of association between Dx and cnv width, CID and CNV width, or                         
     
     cat(i, " has ",  length(unique(peeps$CID)), " CIDs and ", k, " families with > 2 CINDs with this CNV\n")   
     } # i
     colnames(geneSummary) <- c("gene", "numCIDs", "numCIDs.with.>2ind", "numCINDs", "num_affected", "num_unaffected", "mean_width", "num_unique_widths")

write.table(geneSummary, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/statsByGeneMinusRedudantCallsPerCIND.03.17.21.csv", row.names=FALSE, sep =",")                                         

#write.table(geneSummary, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/statsByGene.03.16.21.csv", row.names=FALSE, sep =",")                                         

# write.table(geneSummary, file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/statsByGene.10.1.21.csv", row.names=FALSE, sep =",")                                                                                  
# geneSummary <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/statsByGene.10.1.21.csv")                                         

# now screen out all genes where geneSummary[,2] < 3 | geneSummary[,3] < 3

G2FamiliesWithG2per <- subset(geneSummary, geneSummary[,3] > 2)
G2FamiliesWithG2per <- rbind(G2FamiliesWithG2per, geneSummary[which(geneSummary$gene=="SSX1"),])

write.table(G2FamiliesWithG2per, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.13.21.csv", row.names=FALSE, sep =",") 
# write.table(G2FamiliesWithG2per, file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.4.21.csv", row.names=FALSE, sep =",")  
# G2FamiliesWithG2per <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.13.21.csv")

#####################################################################################################################

#####################################################################################################################
# plotting density after screening steps
# load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.16.22.olapsByAlg.rda")
# use olapByAlg, geneSummary, for all data and pct overlap
# geneSummary <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/statsByGeneMinusRedudantCallsPerCIND.03.17.21.csv")                                         
# allGenesInG2CIND <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.noRepeatsallGenesInG2CIND.csv")

############################################################
# provide summary overalp statistics for deletions
# 75% overlap with gnomAD and GATK
length(which(!is.na(olapByAlg$GATKgnomAD_75pctOverlapMaxAF))) / length(olapByAlg$GATKgnomAD_75pctOverlapMaxAF)

# 75% overlap with gnomAD and XHMM
uXHmmcalls <- vector()
for(i in unique(olapByAlg$sample)){ # i = unique(olapByAlg$sample)[5]
  for(c in unique(olapByAlg$chr[olapByAlg$sample == i])){ # c = unique(olapByAlg$chr[olapByAlg$sample == i])[2]
           for(d in unique(olapByAlg$XHMMstart[olapByAlg$sample == i & olapByAlg$chr == c])){ # d = unique(olapByAlg$XHMMstart[olapByAlg$sample == i & olapByAlg$chr == c])[1]
              # ind <- rownames(olapByAlg) 
              uXHmmcalls <- c(uXHmmcalls, which(olapByAlg$sample == i & olapByAlg$chr == c & olapByAlg$XHMMstart == d)[1])
              } # for d
   } # for c
 } # for i 
  
length(which(!is.na(olapByAlg$XHMMgnomAD_75pctOverlapMaxAF[uXHmmcalls]))) / length(olapByAlg$XHMMgnomAD_75pctOverlapMaxAF[uXHmmcalls])

# 80% overlap with gnomAD and GATK
GATKgnomAD_80pctOverlapMaxAF 
length(which(!is.na(olapByAlg$GATKgnomAD_80pctOverlapMaxAF))) / length(olapByAlg$GATKgnomAD_80pctOverlapMaxAF)

# 80% overlap with gnomAD and XHMM
length(which(!is.na(olapByAlg$XHMMgnomAD_80pctOverlapMaxAF[uXHmmcalls]))) / length(olapByAlg$XHMMgnomAD_80pctOverlapMaxAF[uXHmmcalls])

# get mean allele frequency and range allele frequency
AFbothAlgs <- c(olapByAlg$XHMMgnomAD_80pctOverlapMaxAF[uXHmmcalls][which(!is.na(olapByAlg$XHMMgnomAD_80pctOverlapMaxAF[uXHmmcalls]))], 
      olapByAlg$GATKgnomAD_80pctOverlapMaxAF[which(!is.na(olapByAlg$GATKgnomAD_80pctOverlapMaxAF))])
mean(AFbothAlgs)  
max(AFbothAlgs)  
min(AFbothAlgs)  

# number of XHMM-gnomAD overalps >80% have AF > 0.05
length(which(olapByAlg$XHMMgnomAD_80pctOverlapMaxAF[uXHmmcalls][which(!is.na(olapByAlg$XHMMgnomAD_80pctOverlapMaxAF[uXHmmcalls]))] > 0.05))

# number of GATK-gnomAD overalps >80% have AF > 0.05
length(which(olapByAlg$GATKgnomAD_80pctOverlapMaxAF[which(!is.na(olapByAlg$GATKgnomAD_80pctOverlapMaxAF))]>0.05))

# this is not really useful since many are counted twice for both GATK and XHMM: # length(which(AFbothAlgs > 0.05))

# 80% overlap with XHMMxDGVpctOverlap
length(which(olapByAlg$XHMMxDGVpctOverlap[uXHmmcalls] >= 0.2))
length(which(olapByAlg$XHMMxDGVpctOverlap[uXHmmcalls] >= 0.2)) / length(olapByAlg$XHMMxDGVpctOverlap[uXHmmcalls])
length(which(olapByAlg$XHMMxDGVpctOverlap[uXHmmcalls] >= 0.8)) / length(olapByAlg$XHMMxDGVpctOverlap[uXHmmcalls])

# 80% overlap with GATKxDGVpctOverlap 
length(which(olapByAlg$GATKxDGVpctOverlap >= 0.2)) / length(olapByAlg$GATKxDGVpctOverlap)
length(which(olapByAlg$GATKxDGVpctOverlap >= 0.8)) / length(olapByAlg$GATKxDGVpctOverlap)

# create histograms to illustrate changes in number of genes affected by deletions through filtering by values in "delsLCfamiliesGnomADandDGVolapByAlg"

# *1* genesBothCallersAllDeletions
# for each unique sample, list unique gene names
Dels <- vector("list", length = 181)
names(Dels) <- unique(olapByAlg$sample)

for(i in unique(olapByAlg$sample)){ # i = olapByAlg$sample[29]
                g <- unlist(strsplit(olapByAlg$GATKgene[which(olapByAlg$sample==i)], split = ", "))
                x <- unlist(strsplit(olapByAlg$XHMMgene[which(olapByAlg$sample==i)], split = ", "))
                Dels[[i]] <- unique(c(g, x))
                } # in in unique sample name

freq1 <- table(Reduce(c, Dels))
freq1.1 <- as.data.frame(freq1)
freq1.1[,3] <- "Deletions from Both Callers"
colnames(freq1.1 ) <- c("gene", "Freq", "Group")
dens1 <- density(freq1.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

mean(freq1.1[,2])
sd(freq1.1[,2])

# *2* Greater than 2 Indidivuduals
# allGenesInG2CIND$gene

freq2 <- table(as.vector(allGenesInG2CIND$gene)) # which(allGenesInG2CIND$gene == "AKAP7"
freq2.1 <- as.data.frame(freq2)
freq2.1[,3] <- "Greater than 2 Indidivuduals"
colnames(freq2.1 ) <- c("gene", "Freq", "Group")
dens2 <- density(freq2.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

check<-freq2.1
nrow(check)
mean(check[,2])
sd(check[,2])

# *3* "Greater than 2 Families with 2 per Family"
# allGenesInG2CIND$gene
# geneSummary

freq3 <- table(as.vector(allGenesInG2CIND$gene[allGenesInG2CIND$gene %in% geneSummary$gene[which(geneSummary[,3]>2)]]))
freq3.1 <- as.data.frame(freq3)
freq3.1[,3] <- "Greater than 2 Families with 2 per Family"
colnames(freq3.1) <- c("gene", "Freq", "Group")
dens3 <- density(freq3.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

check<-freq3.1
nrow(check)
mean(check[,2])
sd(check[,2])

# library(car)
png(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.densityByFilterStep.png")
    plot(dens1, main = "Fig. 2 density of per gene calls for each filter step", col = 1,
    xlim = c(1, 60))
    lines(dens2, col = 2) 
    lines(dens3, col = 3)
    legend("topright", legend = c("Deletions from Both Callers", 
                                 "Greater than 2 Indidivuduals",
                                 "Greater than 2 Families with 2 per Family"
                                 #"Exluding Married-Ins",
                                 #"gnomAD AF < 0.05",
                                 
                                 ),
                                  lty = 1, col = 1:5)
dev.off()

# *4* "Exluding CNVs with 95% overlap with Married-Ins CNVs"
glistG2Fam <- as.vector(allGenesInG2CIND$gene[allGenesInG2CIND$gene %in% geneSummary$gene[which(geneSummary[,3]>2)]])

byAlgG2Fam <- allGenesInG2CIND[allGenesInG2CIND$gene %in% glistG2Fam,]
byAlgG2Fam$GATKmarriedInpctOverlapMax[which(is.na(byAlgG2Fam$GATKmarriedInpctOverlapMax))] <- 0
byAlgG2Fam$XHMMmarriedInpctOverlapMax[which(is.na(byAlgG2Fam$XHMMmarriedInpctOverlapMax))] <- 0
mean(byAlgG2Fam$GATKmarriedInpctOverlapMax)
median(byAlgG2Fam$XHMMmarriedInpctOverlapMax)

# subset byAlgG2Fam (the subset of all CNVs called that are in genes that are affected in > 2 ind in > 2 families) to those CNVs with <80% overlap with married-ins
byAlgG2FamMinusMarriedInCNVs <- subset(byAlgG2Fam, byAlgG2Fam$GATKmarriedInpctOverlapMax < .95)
bothAlgG2FamMinusMarriedInCNVs <- subset(byAlgG2FamMinusMarriedInCNVs, byAlgG2FamMinusMarriedInCNVs$XHMMmarriedInpctOverlapMax < .95)

# nrow(subset(byAlgG2Fam, byAlgG2Fam$GATKmarriedInpctOverlapMax < .95))/nrow(byAlgG2Fam)

freq4 <- table(as.vector(bothAlgG2FamMinusMarriedInCNVs$gene))
freq4.1 <- as.data.frame(freq4)
freq4.1[,3] <- "Exluding CNVs with 95% overlap with Married-Ins CNVs"
colnames(freq4.1) <- c("gene", "Freq", "Group")
dens4 <- density(freq4.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

check<-freq4.1
nrow(check)
mean(check[,2])
sd(check[,2])

png(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.densityByFilterStep.png")
    plot(dens1, main = "Fig. 2 density of per gene calls for each filter step", col = 1,
    xlim = c(1, 60))
    lines(dens2, col = 2) 
    lines(dens3, col = 3)
    lines(dens4, col = 4) 
    legend("topright", legend = c("Deletions from Both Callers", 
                                 "Greater than 2 Indidivuduals",
                                 "Greater than 2 Families with 2 per Family",
                                 "Exluding CNVs with 95% overlap with Married-Ins CNVs"
                                 #"gnomAD AF < 0.05",
                                 
                                 ),
                                  lty = 1, col = 1:5)
dev.off()

# *5* remove genes with "gnomAD AF > 0.05"
# subset bothAlgG2FamMinusMarriedInCNVs (exludes either GATK or XHMM CNVs with 95% overlap with married in CNVS which is a subset of byAlgG2Fam (the subset of all CNVs called that are in genes that are affected in > 2 ind in > 2 families)

# "GATKgnomAD70pctOverlapMaxAF"
# "XHMMgnomAD70pctOverlapMaxAF"
# "GATKgnomAD_75pctOverlapMaxAF"
# "XHMMgnomAD_75pctOverlapMaxAF"
# "GATKgnomAD_80pctOverlapMaxAF"
# "XHMMgnomAD_80pctOverlapMaxAF"

# length(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF[which(!is.na(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF))])
# length(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_80pctOverlapMaxAF[which(!is.na(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_80pctOverlapMaxAF))])
# length(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_75pctOverlapMaxAF[which(!is.na(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_75pctOverlapMaxAF))])
# length(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_75pctOverlapMaxAF[which(!is.na(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_75pctOverlapMaxAF))])

#replace NA (no overlap) with AF of 0
bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF[which(is.na(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF))] <- 0
bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_80pctOverlapMaxAF[which(is.na(bothAlgG2FamMinusMarriedInCNVs$XHMMgnomAD_80pctOverlapMaxAF))] <- 0
# length(which(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF < .05)) # length(bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF)
# length(which(G2FamMinusMarriedInCNVsAFL5Pct$XHMMgnomAD_80pctOverlapMaxAF < .05))

G2FamMinusMarriedInCNVsAFL5Pct <- subset(bothAlgG2FamMinusMarriedInCNVs, bothAlgG2FamMinusMarriedInCNVs$GATKgnomAD_80pctOverlapMaxAF < .05)
bothAlgG2FamMinusMarriedInCNVsAFL5Pct <- subset(G2FamMinusMarriedInCNVsAFL5Pct, G2FamMinusMarriedInCNVsAFL5Pct$XHMMgnomAD_80pctOverlapMaxAF < .05)

freq5 <- table(as.vector(bothAlgG2FamMinusMarriedInCNVsAFL5Pct$gene))
freq5.1 <- as.data.frame(freq5)
freq5.1[,3] <- "80% overlap gnomAD AF < 0.05"
colnames(freq5.1) <- c("gene", "Freq", "Group")
dens5 <- density(freq5.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

check<-freq5.1
nrow(check)
mean(check[,2])
sd(check[,2])

# *6* remove genes with "removed CNVs with DGV overlap > 80%"
# bothAlgG2FamMinusMarriedInCNVsAFL5Pct

#replace NA (no overlap) with AF of 0
bothAlgG2FamMinusMarriedInCNVsAFL5Pct$GATKxDGVpctOverlap[which(is.na(bothAlgG2FamMinusMarriedInCNVsAFL5Pct$GATKxDGVpctOverlap))] <- 0
bothAlgG2FamMinusMarriedInCNVsAFL5Pct$XHMMxDGVpctOverlap[which(is.na(bothAlgG2FamMinusMarriedInCNVsAFL5Pct$XHMMxDGVpctOverlap))] <- 0

selected <- subset(bothAlgG2FamMinusMarriedInCNVsAFL5Pct, bothAlgG2FamMinusMarriedInCNVsAFL5Pct$XHMMxDGVpctOverlap < .80) #  nrow(bothAlgG2FamMinusMarriedInCNVsAFL5Pct) = 1879; nrow(selected) = 736
dun <- subset(selected, selected$XHMMxDGVpctOverlap < .80) 
# length(unique(dun$gene)) = 115

freq6 <- table(as.vector(dun$gene))
freq6.1 <- as.data.frame(freq5)
freq6.1[,3] <- "removed DGV overlap > 80%"
colnames(freq6.1) <- c("gene", "Freq", "Group")
dens6 <- density(freq5.1$Freq,  kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine")[1])

check<-freq6.1
nrow(check)
mean(check[,2])
sd(check[,2])


# install.packages("car")
library(car)
library("stringr") 

png(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/04.15.22.densityByFilterStep.png")
    plot(dens1, main = str_wrap("Fig. 4 Changes in density plot of protein coding genes with deletions across filter steps. Filter steps reduce the density of both very low frequency and high frequency deletions.", width = 65), col = 1,
    xlim = c(1, 60), xlab="") # xlab = removes "N =" and "bandwidth = ", sub = "lorum ipsum"
    lines(dens2, col = 2) 
    lines(dens3, col = 3)
    lines(dens4, col = 4) 
    lines(dens5, col = 7)
    #lines(dens6, col = 8)
    legend("topright", legend = c("Deletions from Both Callers", 
                                 "Greater than 2 Indidivuduals",
                                 "Greater than 2 Families with 2 per Family",
                                 "Exluding CNVs overlapping with nonrelative CNVs",
                                 "Exluding 80% overlap gnomAD AF > 0.05"
                                 #"Exluding DGV overlap > 80%"
                                                                 ),
                                  lty = 1, col = c(1:4,7:8))
dev.off()
#####################################################################################################################


df <- rbind(freq1.1, freq2.1, freq3.1, freq4.1, freq5)

############## SORVA!!!!!!!!!!!!!!!!!!!!!
G2FamiliesWithG2per <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.13.21.csv")

geneListwithCoordinates <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListwithCoordinates1.31.22.csv")

#freq5.1[,1][freq5.1[,1] %in% geneListwithCoordinates[,1]]
#geneListwithCoordinates[,1][geneListwithCoordinates[,1] %in% freq5.1[,1]]

write.csv(geneSummary[geneSummary[,1] %in% freq6.1[,1],c(1:6)], file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListAfter6Screens.csv", row.names=FALSE)
# above list used for SORVA 3/17/22

# Need to add  unrelated affecteds for each gene
# = number affected that are not in the same family

# dun$gene[unique(dun$gene) %in% freq6.1[,1]]

# freq6.1[freq6.1[,1] %in% unique(dun$gene),]

geneSummary
sorva <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/SORVA-geneListAfter6Screens.csv - Sheet1.csv")
colnames(sorva)[7:8] <- c("PctPop", "pVal")

screen6 <- sorva[sorva$gene %in% unique(dun$gene),]  

screen7 <- screen6[which(screen6$reaches.genome.wide.significance),]
# this <- screen7[which(as.numeric(screen7$PctPop) > 0),]
old9 <- c("KIR2DL1", "ADAM3A", "DMBT1", "GOLGA8B", "PTPN20", "HNRNPCL1", "SIRPB1", "LILRA6", "HLA-DRB5")

# screen7[screen7 %in% old9,] = none- none of the 9 described genes from prior poster are in list of significant genes

this <- screen7[order(as.numeric(screen7$pVal)),]
# nrow(this) = 45
this[,c("gene","pVal")]

#save(this, screen7, screen6, geneSummary, sorva, dun, freq1, freq2, freq3, freq4, freq5, freq6, file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/convenientGeneLists.03.18.22.csv")
# load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/convenientGeneLists.03.18.22.csv")

# write.csv(this, file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListForLitSearch.03.18.22.csv", row.names=FALSE)

# geneSummary[which(geneSummary$gene == "SSX1"),]

# 03/18/22 list of genes post screening with genome wide significance without pseudogenes and Olfactory Receptors, created from "this" above (file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListForLitSearch.03.18.22.csv")
sum <- read.csv(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListForLitSearch.03.18.22.csv - Sheet1.csv")

# file created with literature search below:
# tbl <- read.csv(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListWithLitSearch_moreCancerLit.03.18.22.csv")
###############################################################
# literature search
#install.packages("reutils") # see: https://github.com/gschofl/reutils or see: https://www.rdocumentation.org/packages/reutils/versions/0.2.2/topics/reutils
# > install.packages("devtools")
#  Rterm.exe --vanilla
require("devtools")
install_github("gschofl/reutils")
library("reutils")


# library(Homo.sapiens)
glist <- sum

#esearch a database to acquire UIDs --> LIST DATABASES: einfo()
for(i in glist$gene){ # i = glist$gene[22]
    gid <- esearch(paste(paste(i,"[GENE]", sep=""), "human[ORGN]", sep=" AND "), db = "gene")
    s <- esummary(uid(gid), db = "gene")
   
   ## try this means of parsing rather than all the acrobatics below?
       ##entrezContent <- content(s, as = "parsed")
       ##entrezSummary <- lapply(entrezContent, '[', "Summary")
   
   if(is.data.frame(content(s, "parsed"))){  
          entrezGeneSummary <- content(s, "parsed")$Summary 
          entrezGeneSummary <- paste(entrezGeneSummary, collapse = "--")
          if("NA" %in% entrezGeneSummary){entrezGeneSummary <- content(s, "parsed")$Description}# doesn't work with formatting for a number of the genes
     } else if (length(content(s, "parsed"))>0){
             entrezGeneSummary <- content(s, "parsed")[[1]]$Summary
             entrezGeneSummary <- paste(entrezGeneSummary, collapse = "--")
             if("NA" %in% entrezGeneSummary){entrezGeneSummary <- content(s, "parsed")[[1]]$Description}
    }   else {  entrezGeneSummary <- "gene not found in genbank"}
        dex = which(glist$gene==i)
    glist[dex,"Summary"]<- entrezGeneSummary
    
    # pubmeds with gene 
        numb <- esearch(i, db = "pubmed", rettype = "count", field = NULL)
        glist[dex,"pubmed.gene"] <- content(numb, "parsed")
    Sys.sleep(5)
    # pubmeds with gene AND cancer
        numb <- esearch(paste(i, "cancer", sep=" AND "), db = "pubmed", rettype = "count")   
        glist[dex,"pubmed.cancerGene"] <- content(numb, "parsed")
        
       #keep getting "Warning: HTTP error: Status 429; Too Many Requests" b/c NCBI limits to 3 requests/s (10 with API key, see above)
       # short cut: have R stop for a second every three requests (esearch)
        Sys.sleep(5)
       
    # pubmeds with gene AND cancer AND prostate
        numb <- esearch(paste(i, "cancer", "(lung OR airway)", sep=" AND "), db = "pubmed", rettype = "count")
        glist[dex,"pubmed.lungCancerGene"] <- content(numb, "parsed")
    
    # NOW ADD TITLES FROM PUBMED FOR prostateCancerGene or then geneCancer or then gene IF > 0
        # search query format: (GSTM1) AND cancer AND ("2018"[Date - Publication] : "3000"[Date - Publication]) 
        #dateRange = paste('(2017[Date - Publication] : 3000[Date - Publication])')
            dateRange = ""
        if(glist[dex,"pubmed.lungCancerGene"]>5){   
           pmid <- esearch(paste(i, "cancer", "(lung OR airway)", dateRange, sep=" AND "), retmax = 5, db = "pubmed", rettype = "uilist")
            s <- esummary(uid(pmid), db = "pubmed")
            pmContent <- content(s, as = "parsed")
            pmTitles <- lapply(pmContent, '[', "Title")
            # combine into a single string
            titleString <- paste(unlist(pmTitles), sep = '----', collapse = '___')
            glist[dex,"Titles"]<- titleString
            
        }else if(!is.na(glist[dex,"pubmed.cancerGene"])){   
            
            pmid <- esearch(paste(i, "cancer", dateRange, sep=" AND "), retmax = 5, db = "pubmed", rettype = "uilist")
            s <- esummary(uid(pmid), db = "pubmed")
            pmContent <- content(s, as = "parsed")
            pmTitles <- lapply(pmContent, '[', "Title")
            # combine into a single string
            titleString <- paste(unlist(pmTitles), sep = '----', collapse = '___')
            glist[dex,"Titles"]<- titleString
            
        }else if(glist[dex,"pubmed.gene"]>0){
            pmid <- esearch(i, retmax = 5, db = "pubmed", rettype = "uilist")
            s <- esummary(uid(pmid), db = "pubmed")
            pmContent <- content(s, as = "parsed")
            pmTitles <- lapply(pmContent, '[', "Title")
            # combine into a single string
            titleString <- paste(unlist(pmTitles), sep = '', collapse = '___')
            glist[dex,"Titles"]<- titleString
        }
        Sys.sleep(5)
    }

# found it would be nice to have the mean width and num of different widths
for(i in 1:nrow(glist)){
glist$num_unique_widths[i] <- geneSummary$num_unique_widths[which(geneSummary$gene == glist$gene[i])]
glist$mean_width[i] <- geneSummary$mean_width[which(geneSummary$gene == glist$gene[i])]
                        }
glist <- glist[order(glist$pubmed.lungCancerGene, decreasing=TRUE),]

write.csv(glist, file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/geneListWithLitSearch_moreCancerLit.03.18.22.csv", row.names=FALSE)


#################################################################################################
# RESULTS: bar chart comparing discovery algorithms. 
# 10.19.21.compositeOfCNVsCalledByGATKandXHMM.csv - calls with > 75% overlap (which did I use in most recent analysis?)

olapCNVs <- overlappingCNVs[which(as.numeric(overlappingCNVs$GATKPhred)>19), c(1:15)]
# from: #load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/overlappingCNVsBothAlgsPhenoFam.12.28.21.rda")


# since XHMM calls are larger and are repeated for multiple GATK overlapping calls, Im gonig to cyle through unique subject to create a new, nonrepetitive list of XHMM calls
end <- c()
start <- c()
for(i in unique(overlappingCNVs$subject)){ # i = unique(overlappingCNVs$subject)[1]
    end <- c(end,as.numeric(overlappingCNVs$XHMMend[which(overlappingCNVs$subject==i)][1]))
    start <- c(start, as.numeric(overlappingCNVs$XHMMstart[which(overlappingCNVs$subject==i)][1]))
    }

XHMMsize <- end -  start
XHMMsizekb <- XHMMsize/1000

GATKsize <- as.numeric(overlappingCNVs$GATKend) - as.numeric(overlappingCNVs$GATKstart)
GATKsizekb <- GATKsize/1000

aG <- length(which(GATKsize < 1000))/length(GATKsize)
aX <- length(which(XHMMsize < 1000))/length(XHMMsize)

bG <- length(which(GATKsize < 100000 & GATKsize > 1000))/length(GATKsize)
bX <- length(which(XHMMsize < 100000 & XHMMsize > 1000))/length(XHMMsize)

cG <- length(which(GATKsize > 100000 & GATKsize < 1000000))/length(GATKsize)
cX <- length(which(XHMMsize > 100000 & XHMMsize < 1000000))/length(XHMMsize)

dG <- length(which(GATKsize > 1000000))/length(GATKsize)
dX <- length(which(XHMMsize > 1000000))/length(XHMMsize)


stars <- matrix(nrow = 2, ncol = 4, data = c(aX, bX, cX, dX, aG, bG, cG, dG), byrow = TRUE,
          dimnames = list(rows=c("XHMM", "GATK4"), columns = c("< 1kb", "1 - 100kb", "100kb - 1Mb", "> 1Mb")))
png(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/10.19.21.callSizeComparison.png")
barplot (stars, main = "Fig. 1 size distribution of XHMM and GATK inferred deletions", space = c(0,.1),
            col = c("light blue", "blue"), beside=TRUE, legend.text = TRUE)
 dev.off()
 mean(XHMMsizekb) # = 133.91 kb
 sd(XHMMsizekb) # = 397.08 
 mean(GATKsizekb) # = 17.69 kb 
 sd(GATKsizekb) # = 68.59         
          
##########################################################################################################
# CNV burden
# is there an association between number of CNVs called and 
# Rterm.exe --vanilla
library(Homo.sapiens)
library(Gviz)
library("stringr") 

load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/XHMMcnvAndGATKcnvWithQAandQSwithFamilyPhenotypeUpdate12.28.21.rda")
load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/overlappingCNVs.04.14.22.rda") # all CNVs with >= 1% overlap
olapCNVs <- overlappingCNVs[which(as.numeric(overlappingCNVs$GATKPhred)>19), c(1:15)]

# plot number of CNVs vs age at onset; number of CNVs vs affected status
# plot sum of bp included in CNV (according to GATK and XHMM separately)

# the following data.frames aren't really useful now, but they are available here
# geneSummary <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/statsByGeneMinusRedudantCallsPerCIND.03.17.21.csv")                                         
# allGenesInG2CIND <- read.csv(file= "C:/Users/4wald/OneDrive - LSUHSC/GELCC/03.17.22.noRepeatsallGenesInG2CIND.csv")

#determine which XHMM calls in olapCNVs are unique
uXHmmcalls <- vector()
for(i in unique(olapCNVs$sample)){ # i = unique(olapCNVs$sample)[5]
  for(c in unique(olapCNVs$chr[olapCNVs$sample == i])){ # c = unique(olapCNVs$chr[olapCNVs$sample == i])[2]
           for(d in unique(olapCNVs$XHMMstart[olapCNVs$sample == i & olapCNVs$chr == c])){ # d = unique(olapCNVs$XHMMstart[olapCNVs$sample == i & olapCNVs$chr == c])[1]
              # ind <- rownames(olapCNVs) 
              uXHmmcalls <- c(uXHmmcalls, which(olapCNVs$sample == i & olapCNVs$chr == c & olapCNVs$XHMMstart == d)[1])
              } # for d
   } # for c
 } # for i 
# uXHmmcalls provides index values (rows) for all the unique XHMM calls

# make start and end as.numeric()
olapCNVs$GATKstart <- as.numeric(olapCNVs$GATKstart)
olapCNVs$GATKend <- as.numeric(olapCNVs$GATKen)
olapCNVs$XHMMstart <- as.numeric(olapCNVs$XHMMstart)
olapCNVs$XHMMend <- as.numeric(olapCNVs$XHMMend)
olapCNVs$olap_width <- as.numeric(olapCNVs$olap_width)
olapCNVs$GATKcall.copyNum <- as.numeric(olapCNVs$GATKcall.copyNum)

#how many deletions (that meet criteria of 1% overlap between algs and Phred > 20) per CIND
noReplicateXHMM <-olapCNVs[uXHmmcalls,]

# columns: Number of GATK calls, number of XHMM calls, total bp by GATK, total bp by XHMM, total bp coverd by both (overlap), GATK ploidy, number affected chromosomes
burden <- data.frame(sample = NA, CID = NA,
                    num.GATKdels = NA, num.XHMMdels = NA, sum.GATKbp = NA, sum.XHMMbp = NA, sum.overlapbp = NA, 
                    GATKbp.FactorGATKdelPloidy = NA, overlapbp.FactorGATKdelPloidy = NA, numAffectedGenes.GATK = NA,
                    numAffectedGenes.XHMM = NA, numAffectedChrs = NA, sex = NA, packYears = NA, affected = NA, age.onset = NA)[-1,]

for(i in familyPhenotypes$submitted.sample.id){ # i = familyPhenotypes$submitted.sample.id[42]
    burden <- rbind(burden, data.frame(
            sample = i,
            CID = familyPhenotypes$CID[familyPhenotypes$submitted.sample.id==i],
            num.GATKdels = nrow(olapCNVs[olapCNVs$sample == i,]),
            num.XHMMdels = nrow(noReplicateXHMM[noReplicateXHMM$sample == i,]),
            sum.GATKbp = sum(olapCNVs$GATKend[olapCNVs$sample == i] - olapCNVs$GATKstart[olapCNVs$sample == i]),
            sum.XHMMbp = sum(noReplicateXHMM$XHMMend[noReplicateXHMM$sample == i] - noReplicateXHMM$XHMMstart[noReplicateXHMM$sample == i]),
            sum.overlapbp = sum(olapCNVs$olap_width[olapCNVs$sample == i]),
            GATKbp.FactorGATKdelPloidy = sum(  (olapCNVs$GATKend[olapCNVs$sample == i] - olapCNVs$GATKstart[olapCNVs$sample == i])*(2-olapCNVs$GATKcall.copyNum[olapCNVs$sample == i])),
            overlapbp.FactorGATKdelPloidy = sum(  (olapCNVs$olap_width[olapCNVs$sample == i])*(2-olapCNVs$GATKcall.copyNum[olapCNVs$sample == i])),
            numAffectedGenes.GATK =  length(unique(unlist(strsplit(olapCNVs$GATKgene[olapCNVs$sample == i], split = ", ")) ) ),
            numAffectedGenes.XHMM = length(unique(unlist(strsplit(noReplicateXHMM$XHMMgene[noReplicateXHMM$sample == i], split = ", "))  )),
            numAffectedChrs = length(unique( olapCNVs$chr[olapCNVs$sample == i]) ),
            sex = familyPhenotypes$sex[familyPhenotypes$submitted.sample.id == i],
            packYears = familyPhenotypes$pack.years[familyPhenotypes$submitted.sample.id == i],
            affected = familyPhenotypes$diagnosis.of.lung.throat.pharynx.larynx.cancer[familyPhenotypes$submitted.sample.id == i],
            age.onset = familyPhenotypes$Age.at.Onset.1o.cancer[familyPhenotypes$submitted.sample.id == i]    
            ) # data.frame
            ) # rbind        
   } # for i
burden$affected <- factor(burden$affected)
burden$CID <- factor(burden$CID)

#now remove married-ins
marriedInSampleName <- familyPhenotypes[familyPhenotypes$CID == 12 & familyPhenotypes$CIND == 44 | familyPhenotypes$CID == 12 & familyPhenotypes$CIND == 29 |
                       familyPhenotypes$CID == 103 & familyPhenotypes$CIND == 117|
                       familyPhenotypes$CID == 25 & familyPhenotypes$CIND == 3|
                       familyPhenotypes$CID == 26 & familyPhenotypes$CIND == 20|
                       familyPhenotypes$CID == 31 & familyPhenotypes$CIND == 5|
                       familyPhenotypes$CID == 33 & familyPhenotypes$CIND == 2|
                       familyPhenotypes$CID == 34 & familyPhenotypes$CIND == 12|
                       familyPhenotypes$CID == 69 & familyPhenotypes$CIND == 112| familyPhenotypes$CID == 69 & familyPhenotypes$CIND == 102 |
                       familyPhenotypes$CID == 90 & familyPhenotypes$CIND == 55 |
                       familyPhenotypes$CID == 135 & familyPhenotypes$CIND == 122 |
                       familyPhenotypes$CID == 35 & familyPhenotypes$CIND == 29| 
                       familyPhenotypes$CID == 47 & familyPhenotypes$CIND == 16|
                       familyPhenotypes$CID == 102 & familyPhenotypes$CIND == 346|
                       familyPhenotypes$CID == 131 &  familyPhenotypes$CIND == 125 |
                       familyPhenotypes$CID == 52 & familyPhenotypes$CIND == 4| familyPhenotypes$CID == 52 & familyPhenotypes$CIND == 13|
                       familyPhenotypes$CID == 88 & familyPhenotypes$CIND == 13| familyPhenotypes$CID == 88 & familyPhenotypes$CIND == 52,1]
burdenFamily <- burden[-which(burden$sample %in% marriedInSampleName),] #nrow 204 --> nrow 184

#make column identifying sample as married-in
burden$marriedIn <- FALSE
burden$marriedIn[which(burden$sample %in% marriedInSampleName)] <- TRUE
burden$marriedIn <- factor(burden$marriedIn)


#summary of burden
mean(burden$num.GATKdels)
mean(burden$num.XHMMdels)
mean(burden$sum.GATKbp)
mean(burden$sum.XHMMbp)
mean(burden$sum.overlapbp)
mean(burden$overlapbp.FactorGATKdelPloidy)
mean(burden$GATKbp.FactorGATKdelPloidy)
mean(burden$numAffectedGenes.GATK)
mean(burden$numAffectedGenes.XHMM)

#save(burden, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/4.18.22BURDENtable.rda")

load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/4.18.22BURDENtable.rda")

#  Mann Whitney U test - test whether two samples are likely to derive from the same population
wilcox.test(sum.overlapbp ~ affected , data=burden,
                 alternative = c("two.sided", "less", "greater")[3]) # p-value = 0.9858

wilcox.test(numAffectedGenes.GATK ~ affected , data=burden,
                 alternative = c("two.sided", "less", "greater")[3]) # p-value = 0.7032

#Mixed effects regression analysis # install.packages("lme4")
library(lme4) 

# adding a column to make "not yet diagnosed" into 150 as age of onset
burden$age.onset.150ForNotYet <- burden$age.onset
burden$age.onset.150ForNotYet[burden$age.onset.150ForNotYet == "-"] <- 150
burden$age.onset.150ForNotYet <- as.numeric(burden$age.onset.150ForNotYet)

lmm <- lmer(sum.overlapbp ~ affected +  marriedIn + (1 | age.onset.150ForNotYet), data = burden,
    REML = FALSE)
summary(lmm)

# adjusting structure
lmm <- lmer(affected  ~  sum.overlapbp +  sex + BY-2022 , data = burden,
    REML = FALSE)
summary(lmm)

# to make a table


####################################
#study population table

library(webshot)
library(gt)
# help = https://gt.rstudio.com/articles/intro-creating-gt-tables.html
# "Age, No. (%)", # row in table labels, not table values

AoO <- as.numeric(familyPhenotypes$Age.at.Onset.1o.cancer[which(familyPhenotypes$Age.at.Onset.1o.cancer != "-" & familyPhenotypes$Age.at.Onset.1o.cancer!= "-1")])
PY <-  as.numeric(familyPhenotypes$pack.years[which(familyPhenotypes$pack.years != "-" & familyPhenotypes$pack.years != "-1"  & familyPhenotypes$pack.years != "") ])

summaryPop <- data.frame(Characteristics = c("Total Number", "% female", "Num. of Smokers (mean Pack Years)", "with LC Diagnosis", "Mean Age at Dx (SD)", "Num. Non-Blood Relatives"),
                         Participants = c(nrow(familyPhenotypes), 
                                 round(length(which(familyPhenotypes$SEX == 2))/nrow(familyPhenotypes), 4) *100,
                                 paste(length(PY), " (", round(mean(PY), 2), ")", sep=""),
                                 length(which(familyPhenotypes$diagnosis.of.lung.throat.pharynx.larynx.cancer)),
                                 paste(round(mean(AoO), 2)," (", round(sd (AoO), 2), ")", sep=""),
                                 length(marriedInSampleName)
                                 ) # c       
                         ) # data.frame

      gt_tbl <- gt(summaryPop, rowname_col = "Label")
      tbl <- gt_tbl %>%
                    tab_header(title = "Table 1. Selected characteristics of study participants",
                       ) %>%
                       opt_align_table_header(align = "left") %>%
                   
                             
tab <- tbl %>% tab_options(heading.title.font.size = 16, container.width = 800, data_row.padding.horizontal = 50,
                      column_labels.padding.horizontal = 50,column_labels.font.weight = "bold", table_body.vlines.width = 2)

 # %>% cell_borders(sides = "all", color = "black", style = "solid", weight = px(1))

gtsave(tab,
    "4.18.22.participantDemographics.png", expand = 10,
    path = "C:/Users/4wald/OneDrive - LSUHSC/GELCC"
  )
  



