#Rterm.exe --vanilla
# source("https://raw.githubusercontent.com/johnbwaldron/genes/master/convertGenomicRangeToGeneName")
# look here for ideas: https://support.bioconductor.org/p/67118/

library("reutils")
library(Homo.sapiens)


# note: in the GATK output, the following is very important: 
#  "GT of 0 indicates normal ploidy, 1 indicates deletion and 2 denotes duplication. 
# The CN annotation indicates the copy number state."
# information on GATK output: https://gatk.broadinstitute.org/hc/en-us/articles/360035531152--How-to-Call-common-and-rare-germline-copy-number-variants#5


library(vcfR)
#############################load GATK output for each sample to populate the dataframe##########################################################
files = list.files(path = "C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/unzipped/", pattern = "^.*(.vcf)$")

# make dataframe with columns = "sample", "chr", "start", "end", "del_1.dup_2", "copyNum"
GATKresults <- data.frame(sample="0", chr="0", ID="0", X ="0")[-1,]


for(i in 1:202){
           # note sample 0 only shows CNVs in chr 1, something is likely wrong with this
           df <- read.delim(file= paste("C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/unzipped/genotyped-segments-cohort203-sample.", i, ".vcf", sep = ""), 
           colClasses = "character", skip = 11)
           tableBySample <- data.frame(sample="0", chr=df$X.CHROM, ID=df$ID, X=df[,10])
           tableBySample[c(1:nrow(df)),1] <- gsub("[.]", "-", colnames(df)[10]) ########paste(strsplit(colnames(df)[10], "[.]")[[1]][1], strsplit(colnames(df)[10], "[.]")[[1]][2], strsplit(colnames(df)[10], "[.]")[[1]][3], sep="-")
            
           GATKresults <- rbind(GATKresults, tableBySample)
           }
# write.table(GATKresults, file="C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/GATKfor202samplesInOneTable", row.names=FALSE, sep=",")
# GATKresults <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/GATKfor202samplesInOneTable", colClasses = "character", sep=",")
#######################################################################################
#above completed 7/1/2020
#######################################################################################
# kirsten <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/prostateCancerGATKResults/GATK_Results_203_LA_HPC_Samples.txt", colClasses = "character")
#remove empty rows and NA # 

GATKresults <- GATKresults[-which(GATKresults$SAMPLE == "" | GATKresults$SAMPLE == "SAMPLE"),] # removes none
GATKresults <- GATKresults[-which(GATKresults$ID == "" | GATKresults$ID == "NA"),] # removes 3157, 80448



#create new dataframe with the following columns for each sample: sample, chr, start, end, del_1.dup_2, copyNum
loc <- strsplit(GATKresults[,"ID"], "_")
mut <- strsplit(GATKresults[,"X"], ":")
cnv <- data.frame("sample"= as.character(GATKresults$sample), "chr"= sapply(loc, "[", 2), "start" = as.numeric(sapply(loc, "[", 3)), "end" = as.numeric(sapply(loc, "[", 4)), "del_1.dup_2" = sapply(mut, "[", 1), "copyNum" = sapply(mut, "[", 2))

#remove the extraneous characters surrounding the sample name in the GATK output. i.e. "./LSU100110KIreorder" -> "LSU100110KIreorder" ->  "LSU100110KI"
#cnv$sample <- as.character(cnv$sample)
#cnv$sample <- sapply(strsplit(cnv$sample, split='/', fixed=TRUE), function(x) (x[2]))
#cnv$sample <- sapply(strsplit(cnv$sample, split='reorder', fixed=TRUE), function(x) (x[1]))
GATKcnv <- cnv

# write.table(GATKcnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/GATKcnv_sample_chr_start_end_del1.dup2_copyNum.txt", row.names=FALSE, sep=",")

# GATKcnv <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/GATKcnv_sample_chr_start_end_del1.dup2_copyNum", sep=",")

################################################################################################################
# formatting XHMM
################################################################################################################
# load and format XHMM results
# df <- read.csv(file="C:/Users/jwaldr/OneDrive - LSUHSC/prostateCancerGATKResults/XHMMresults/LAHPC_WES_203_SAMPLES_XHMM.csv", colClasses = "character")

#remove empty rows
# df <- df[-which(df$SAMPLE == ""),]

#create new dataframe with the following columns for each sample: sample, chr, start, end, del_1.dup_2, copyNum
# loc <- strsplit(df[,"INTERVAL"], "[:-]")

#if "DUP" -> 2, if "DEL" -> 1 for del_1.dup_2"
# df$CNV[which(df$CNV == "DUP")] <- 2 
# df$CNV[which(df$CNV == "DEL")] <- 1 

# XHMMcnv <- data.frame("sample"= as.character(df$SAMPLE), "chr"= sapply(loc, "[", 1), "start" = as.numeric(sapply(loc, "[", 2)), "end" = as.numeric(sapply(loc, "[", 3)), "del_1.dup_2" = df$CNV, "copyNum" = "NA")

#remove the extraneous characters surrounding the sample name in the GATK output. i.e. "./LSU100110KIreorder" -> "LSU100110KIreorder" ->  "LSU100110KI"
# XHMMcnv$sample <- as.character(XHMMcnv$sample)
# XHMMcnv$sample <- sapply(strsplit(XHMMcnv$sample, split='/', fixed=TRUE), function(x) (x[2]))
# XHMMcnv$sample <- sapply(strsplit(XHMMcnv$sample, split='_reorder', fixed=TRUE), function(x) (x[1]))
################################################################################################################

################################################################################################################
A <- makeGRangesFromDataFrame(GATKcnv) # B <- makeGRangesFromDataFrame(GATKcnv)
B <- makeGRangesFromDataFrame(XHMMcnv, keep.extra.columns=TRUE)
olaps <- findOverlaps(A, B)

#olaps is a two-column matrix, indicating which element(s) of A overlap the corresponding elements of B. In the invocation above A and B enter symmetrically, but could be re-ordered if there were restrictions on the type of overlap (argument type, e.g., all of B strictly within A). To find the extent of overlap, I looked at the parallel (element wise) intersection of each overlap

isect <- pintersect(A[queryHits(olaps)], B[subjectHits(olaps)])
isect

# save(isect, olaps, XHMMcnv, GATKcnv, file = "C:/Users/jwaldr/OneDrive - LSUHSC/prostateCancerGATKResults/olaps2.14.2020.RData")

# create a data.frame with whatever information needed

data.frame(query=queryHits(olaps), subject=subjectHits(olaps),
           olap_width=width(isect), 
           query_width=width(A)[queryHits(olaps)],
           variantaccession=B$variantaccession[subjectHits(olaps)])
# This will be fast for millions of records in A and B.

makeGRangesFromDataFrame is available in the current release version of the package, installed by default when using R-3.1. It's easy to make a GRanges 'by hand', e.g.,

A <- with(a, GRanges(Chromosome, IRanges(Start, End)))
B <- with(b, GRanges(chr, IRanges(start, end), variantaccession=variantaccession))
################################################################################################################

cnvGranges <- makeGRangesFromDataFrame(cnv, keep.extra.columns=TRUE, seqnames.field = "chr")

geneRanges <- 
    function(db, column="ENTREZID")
{
    g <- genes(db, columns=column)
    col <- mcols(g)[[column]]
    genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
    mcols(genes)[[column]] <- as.character(unlist(col))
    genes
}

gns = geneRanges(Homo.sapiens, column="SYMBOL")


####################################################################################################
#Find overlap

splitByOverlap <-
    function(query, subject, column="ENTREZID", ...)
{
    olaps <- findOverlaps(query, subject, ...)
    f1 <- factor(subjectHits(olaps),
                 levels=seq_len(subjectLength(olaps)))
    splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}

symInCnv = splitByOverlap(gns, cnvGranges, "SYMBOL")

#?g <- genes(Homo.sapiens, column="ENTREZID")
#laps <- findOverlaps(g, cnvGranges)
#fa <- factor(subjectHits(laps), levels=seq_len(subjectLength(laps)))
#answer <- splitAsList(mcols(g)[["SYMBOL"]][queryHits(laps)], fa)

cnv$gene <- NA

for(i in 1:nrow(cnv)){
cat("cnv #", i, " covers ", paste(symInCnv[[i]], collapse=", "), "\n")
cnv$gene[i] <- paste(symInCnv[[i]], collapse=", ")
}


write.table(cnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/prostateCancerGATKResults/cnvWithSymbol.csv", row.names=FALSE, sep=",") #quote=c(1:3)???

#maybe use annotatr instead
if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager")
BiocManager::install("annotatr")

library("annotatr")
