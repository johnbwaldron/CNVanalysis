#Rterm.exe --vanilla

library(Homo.sapiens) 


########################## starting from scratch.
########################## for careful comparison of deletion and duplication calls PRIOR to checking for overlap between calls
########################## for implementation of appropriate quality scores PRIOR to inclusion of CNV calls in analysis
# for previous (9/28/21) GATK output combined int one table, see CNVanalysis/blob/main/individualGATKgenotypeCallsToOneTable
# redo process of combining important GATK calls into one table with quality scores:
##FORMAT=<ID=CN,Number=1,Type=Integer,Description="Segment most-likely copy-number call">
##FORMAT=<ID=GT,Number=1,Type=Integer,Description="Segment genotype">
##FORMAT=<ID=NP,Number=1,Type=Integer,Description="Number of points (i.e. targets or bins) in the segment">
##FORMAT=<ID=QA,Number=1,Type=Integer,Description="Complementary Phred-scaled probability that all points (i.e. targets or bins) in the segment agree with the segment copy-number call">
##FORMAT=<ID=QS,Number=1,Type=Integer,Description="Complementary Phred-scaled probability that at least one point (i.e. target or bin) in the segment agrees with the segment copy-number call">
##FORMAT=<ID=QSE,Number=1,Type=Integer,Description="Complementary Phred-scaled probability that the segment end position is a genuine copy-number changepoint">
##FORMAT=<ID=QSS,Number=1,Type=Integer,Description="Complementary Phred-scaled probability that the segment start position is a genuine copy-number changepoint">
## GT:CN:NP:QA:QS:QSE:QSS	0:2:1:67:67:67:67 ####### df <- read.delim(file= paste("C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/unzipped/genotyped-segments-cohort203-sample.", i, ".vcf", sep = ""), colClasses = "character") 

files = list.files(path = "C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/unzipped/", pattern = "^.*(.vcf)$")

# make dataframe with columns = "sample", "chr", "start", "end", "del_1.dup_2", "copyNum", "PhredAllPtsAgree", "PhredMinOnePtAgrees" 
GATKresults <- data.frame(sample="0", chr="0", ID="0", X ="0")[-1,]


for(i in 1:202){
           # note sample 0 only shows CNVs in chr 1, something is likely wrong with this
           df <- read.delim(file= paste("C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/unzipped/genotyped-segments-cohort203-sample.", i, ".vcf", sep = ""), 
           colClasses = "character", skip = 11)
           tableBySample <- data.frame(sample="0", chr=df$X.CHROM, ID=df$ID, X=df[,10])
           tableBySample[c(1:nrow(df)),1] <- gsub("[.]", "-", colnames(df)[10]) ########paste(strsplit(colnames(df)[10], "[.]")[[1]][1], strsplit(colnames(df)[10], "[.]")[[1]][2], strsplit(colnames(df)[10], "[.]")[[1]][3], sep="-")
            
           GATKresults <- rbind(GATKresults, tableBySample)
           }

GATKresults <- GATKresults[-which(GATKresults$SAMPLE == "" | GATKresults$SAMPLE == "SAMPLE"),] # removes none
GATKresults <- GATKresults[-which(GATKresults$ID == "" | GATKresults$ID == "NA"),] # removes 2 rows (3157, 80448) #(prior to this step,  nrow(GATKresults) = 89056. Aftter, nrow(GATKresults) =  89054)

#create new dataframe with the following columns for each sample: "sample", "chr", "start", "end", "del_1.dup_2", "copyNum", "PhredAllPtsAgree", "PhredMinOnePtAgrees" 
loc <- strsplit(GATKresults[,"ID"], "_")
mut <- strsplit(GATKresults[,"X"], ":")
cnv <- data.frame("sample"= as.character(GATKresults$sample), 
                  "chr"= sapply(loc, "[", 2), 
                  "start" = as.numeric(sapply(loc, "[", 3)), 
                  "end" = as.numeric(sapply(loc, "[", 4)), 
                  "del_1.dup_2" = sapply(mut, "[", 1), 
                  "copyNum" = sapply(mut, "[", 2),
                  "PhredAllPtsAgree" = sapply(mut, "[", 4), 
                  "PhredMinOnePtAgrees" = sapply(mut, "[", 5))

write.table(cnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/GATKfor202samplesInOneTableWithQAandQS.csv")
 GATKcnv <- cnv
###################################################### XHMM

df <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/XHMM/DATA.xcnv") # , colClasses = , sep=",""character"
#remove empty rows
# df <- df[-which(df$SAMPLE == ""),] # before removing empty rows (nrow(df) = 11550)

#create new dataframe with the following columns for each sample: "sample", "chr", "start", "end", "del_1.dup_2", "copyNum", "PhredAllPtsAgree", "PhredMinOnePtAgrees"
loc <- strsplit(df[,"INTERVAL"], "[:-]")

#if "DUP" -> 2, if "DEL" -> 1 for del_1.dup_2"
df$CNV[which(df$CNV == "DUP")] <- 2 
df$CNV[which(df$CNV == "DEL")] <- 1 

XHMMcnv <- data.frame("sample"= as.character(df$SAMPLE), 
                      "chr"= sapply(loc, "[", 1), 
                      "start" = as.numeric(sapply(loc, "[", 2)), 
                      "end" = as.numeric(sapply(loc, "[", 3)), 
                      "del_1.dup_2" = df$CNV, 
                      "copyNum" = "NA",
                      "PhredAllPtsAgree" = df$Q_EXACT, 
                      "PhredMinOnePtAgrees" = df$Q_SOME)
# chromosome format with "chr#"
#### XHMMcnv$chr <- paste("chr", XHMMcnv$chr, sep="")

#write.table(XHMMcnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/XHMMcnv_sample_chr_start_end_del1.dup2_copyInOneTableWithQAandQS.txt", row.names=FALSE, sep=",")

######################### then see CNVanalysis/blob/main/GELCCfindOverlapInCANOES-XHMM-GATK for combining GATK and XHMM into overlaping calls.

save(XHMMcnv, GATKcnv, phenoFam, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/XHMMcnvAndGATKcnvWithQAandQS.rda")







load(file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.9.22.21.rda") #from githubusercontent.com/johnbwaldron/CNVanalysis/main/multistepCNVScreening
#### pay attention to this date!!! 9.20.21 has only 135 samples, 9.22.21 has 202

#add copyNum to data.frame of overlaps  
for(i in unique(GATKcnv$sample)){                      #i = GATKcnv$sample[1]
A <- FALSE
B <- FALSE

A <- makeGRangesFromDataFrame(subset(GATKcnv, GATKcnv$sample == i), keep.extra.columns=TRUE) 
if(any(XHMMcnv$sample == i)){
    B <- makeGRangesFromDataFrame(subset(XHMMcnv, XHMMcnv$sample == i), keep.extra.columns=TRUE)

    ABlaps <- findOverlaps(A, B)
    ABsect <- pintersect(A[queryHits(ABlaps)], B[subjectHits(ABlaps)])
    ##################################### GATK vs. XHMM CALLS TO SUBSET BY SAMPLE/INDIVIDUAL#####################################
    GATKandXHMM <- data.frame(sample = A$sample[queryHits(ABlaps)],
                chr = as.data.frame(A)$seqnames[queryHits(ABlaps)],
                GATKstart = as.data.frame(A)$start[queryHits(ABlaps)],
                GATKend = as.data.frame(A)$end[queryHits(ABlaps)],
                XHMMstart = as.data.frame(B)$start[subjectHits(ABlaps)],
                XHMMend = as.data.frame(B)$end[subjectHits(ABlaps)],
                query=queryHits(ABlaps), subject=subjectHits(ABlaps),
                olap_width=width(ABsect), 
                query_width=width(A)[queryHits(ABlaps)],
                GATKcall.del_1.dup_2 = as.data.frame(A)$del_1.dup_2[queryHits(ABlaps)],
                GATKcall.copyNum = as.data.frame(A)$copyNum[queryHits(ABlaps)],
                gene=A$gene[queryHits(ABlaps)])
                
    write.table(GATKandXHMM, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMMpluScopyNum/GATKandXHMM.", i, ".csv", sep=""), row.names=FALSE, sep=",") #quote=c(1:3)???
    } else {
        cat("no.olaps in ", i)
        GATKandXHMM <- data.frame(sample = i,
                chr = "no.olaps",
                GATKstart = "no.olaps",
                GATKend = "no.olaps",
                XHMMstart = "no.olaps",
                XHMMend = "no.olaps",
                query= "no.olaps", subject="no.olaps",
                olap_width="no.olaps", 
                query_width="no.olaps",
                GATKcall.del_1.dup_2 = "no.olaps",
                GATKcall.copyNum = "no.olaps",
                gene="no.olaps")
        write.table(GATKandXHMM, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMMpluScopyNum/GATKandXHMM.", i, ".csv", sep=""), row.names=FALSE, sep=",")
                }

} # end of loop

##create new data.frame with overlapping cnvs + copyNum

overlappingCNVs <- matrix(nrow=0, ncol=12)
overlappingCNVs <- as.data.frame(overlappingCNVs)
colnames(overlappingCNVs) <- c("sample", "chr", "GATKstart", "GATKend", "XHMMstart", "XHMMend", "query", "subject", "olap_width", "query_width", "GATKcall.del_1.dup_2", "copyNum", "gene")
i=0
for(i in unique(GATKcnv$sample)){                      #i = GATKcnv$sample[1]
  
  GATKandXHMM <- read.csv(file = paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMMpluScopyNum/GATKandXHMM.", i, ".csv", sep=""))
  cat(i, GATKandXHMM[1,1], "\n")
  overlappingCNVs <- rbind(overlappingCNVs, GATKandXHMM)
}

write.table(overlappingCNVs, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/compositeOfCNVsCalledByGATKandXHMMpluScopyNum", ".csv", sep=""), row.names=FALSE, sep=",")

# save(cnvs, overlappingCNVs, pheno, phenoFam, XHMMcnv, GATKcnv, file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsBothAlgsPhenoFamPluSoverlappingCNVs.9.28.21.rda")  

# include only deletions

delCalls <- subset(overlappingCNVs, overlappingCNVs$GATKcall.del_1.dup_2 ==1)
# remove redundant calls because of XHMM, but THIS TIME without removing non-blood relatives as above
remove <- vector()
for (i in 2:nrow(delCalls)){
    if (delCalls$subject[i] == delCalls$subject[i-1]){
        remove <- append(remove, i)
        cat("deleting row ", i, '\n')
    }
    } #nrow
delCalls <- delCalls[-remove,]
#see what we have here for genes
genesBothCallersAllDeletions <- unlist(strsplit(delCalls$gene, split = ", ")) # length(unique(genesBothCallersAllDeletions) = 580

marriedInSampleName <- phenoFam[phenoFam$CID == 12 & phenoFam$CIND == 44 | phenoFam$CID == 12 & phenoFam$CIND == 29 |
                       phenoFam$CID == 35 & phenoFam$CIND == 29| 
                       phenoFam$CID == 47 & phenoFam$CIND == 16|
                       phenoFam$CID == 102 & phenoFam$CIND == 346|
                       phenoFam$CID == 52 & phenoFam$CIND == 4| phenoFam$CID == 52 & phenoFam$CIND == 13|
                       phenoFam$CID == 88 & phenoFam$CIND == 13| phenoFam$CID == 88 & phenoFam$CIND == 52,1]
delCallsLCfamilies <- delCalls[-which(delCalls$sample %in% marriedInSampleName),]

delCallsLCfamiliesgeneIDs <- unlist(strsplit(delCallsLCfamilies$gene, split = ", "))  # length(unique(delCallsLCfamiliesgeneIDs)) = 566

# create table grouped by gene that includes deletions in genes that affect at least 3 individuals.

freq <-table(delCallsLCfamiliesgeneIDs[delCallsLCfamiliesgeneIDs != "NA"]) 
genelistG2 <- as.data.frame(freq)[as.data.frame(freq)[,2]>2,]
colnames(genelistG2) <- c("gene", "Freq")


allGenesInG2CIND <- data.frame() 
for (j in 1:length(genelistG2$gene)){    #j=1
      loc <- vector()
      for(i in 1:length(delCallsLCfamilies$gene)){
              if (genelistG2$gene[j] %in% strsplit(delCallsLCfamilies$gene, split = ", ")[[i]]){
              loc <- c(loc, i)}
                          
              } # i
      cat("working on ", as.vector(genelistG2$gene)[j], "\n")

# match sample in delCallsLCfamilies (cnvs with only dels, minus married-ins) to sample in phenoFam: CID and CIND, "CF", "CM", "diagnosis.of.lung.throat.pharynx.larynx.cancer", "Age.at.Onset.1o.cancer"
      family <- delCallsLCfamilies[loc,1:4] 
      for(w in 1:length(family$sample)){    # w = 2
         family[w,"CID"] <- phenoFam[which(phenoFam$submitted.sample.id == family$sample[w]), "CID"]
         family[w,"CIND"] <- phenoFam[which(phenoFam$submitted.sample.id == family$sample[w]), "CIND"]
         family[w,"CF"] <- phenoFam[which(phenoFam$submitted.sample.id == family$sample[w]), "CF"]
         family[w,"CM"] <- phenoFam[which(phenoFam$submitted.sample.id == family$sample[w]), "CM"]
         family[w,"diagnosis.of.lung.throat.pharynx.larynx.cancer"] <- phenoFam[which(phenoFam$submitted.sample.id == family$sample[w]), "diagnosis.of.lung.throat.pharynx.larynx.cancer"]
         family[w,"Age.at.Onset.1o.cancer"] <- phenoFam[which(phenoFam$submitted.sample.id == family$sample[w]), "Age.at.Onset.1o.cancer"]
         } # w
   #label this information with the gene of interest
   family$gene <- genelistG3$gene[j]

allGenesInG2CIND <- rbind(allGenesInG2CIND, family)
}



