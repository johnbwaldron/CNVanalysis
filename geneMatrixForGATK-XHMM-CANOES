#Rterm.exe --vanilla
# source("https://raw.githubusercontent.com/johnbwaldron/genes/master/convertGenomicRangeToGeneName")
# look here for ideas: https://support.bioconductor.org/p/67118/

library("reutils") # does not exist, do i need it?? (2/23/21)
library(Homo.sapiens)
library(GenomicRanges)
#library(vcfR)

#if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
    # BiocManager::install("Homo.sapiens")
    # BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")

################################################################################################################
#load(file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.2.19.2021.rda")

XHMMcnvGranges <- makeGRangesFromDataFrame(XHMMcnv, keep.extra.columns=TRUE, seqnames.field = "chr")

GATKcnvGranges <- makeGRangesFromDataFrame(GATKcnv, keep.extra.columns=TRUE, seqnames.field = "chr")

CANOEScnvGranges <- makeGRangesFromDataFrame(CANOEScnv, keep.extra.columns=TRUE, seqnames.field = "chr")


geneRanges <- 
    function(db, column="ENTREZID")
{
    g <- genes(db, columns=column) # , single.strand.genes.only=TRUE
    col <- mcols(g)[[column]]
    genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
    mcols(genes)[[column]] <- as.character(unlist(col))
    genes
}

gns = geneRanges(Homo.sapiens, column="SYMBOL")


####################################################################################################
#Find overlap

splitByOverlap <-
    function(query, subject, column="ENTREZID", ...)
{
    olaps <- findOverlaps(query, subject, ...)
    f1 <- factor(subjectHits(olaps),
                 levels=seq_len(subjectLength(olaps)))
    splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}

####################################################################################################
# splitByOverlap genes by GATKcnvGranges
symInCnv = splitByOverlap(gns, GATKcnvGranges, "SYMBOL")

# splitByOverlap genes by XHMMcnvGranges
symInCnv = splitByOverlap(gns, XHMMcnvGranges, "SYMBOL")

# splitByOverlap genes by CANOEScnvGranges
symInCnv = splitByOverlap(gns, CANOEScnvGranges, "SYMBOL")

###########################3/2/21 -- change/add below to create a matrix of all genes and 1/0 to indicate affected for each individual?????

#?g <- genes(Homo.sapiens, column="ENTREZID")
#laps <- findOverlaps(g, cnvGranges)
#fa <- factor(subjectHits(laps), levels=seq_len(subjectLength(laps)))
#answer <- splitAsList(mcols(g)[["SYMBOL"]][queryHits(laps)], fa)

# add column to CNV table
GATKcnv$gene <- NA
XHMMcnv$gene <- NA
CANOEScnv$gene <- NA

# GATK - loop through each CNV listed in each table from each algorithm
for(i in 1:nrow(GATKcnv)){
cat("GATKcnv #", i, " covers ", paste(symInCnv[[i]], collapse=", "), "\n")
GATKcnv$gene[i] <- paste(symInCnv[[i]], collapse=", ")
}
# write.table(GATKcnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/Literature/genotyped/GATKcnv_sample_chr_start_end_del1.dup2_copyNum_gene.csv", row.names=FALSE, sep=",") #quote=c(1:3)???

# XHMM - loop through each CNV listed in each table from each algorithm
for(i in 1:nrow(XHMMcnv)){
cat("XHMMcnv #", i, " covers ", paste(symInCnv[[i]], collapse=", "), "\n")
XHMMcnv$gene[i] <- paste(symInCnv[[i]], collapse=", ")
}
# write.table(XHMMcnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/XHMM/XHMMcnv_sample_chr_start_end_del1.dup2_copyNum_gene.txt", row.names=FALSE, sep=",") #quote=c(1:3)???

# CANOES - loop through each CNV listed in each table from each algorithm
for(i in 1:nrow(CANOEScnv)){
cat("CANOEScnv #", i, " covers ", paste(symInCnv[[i]], collapse=", "), "\n")
CANOEScnv$gene[i] <- paste(symInCnv[[i]], collapse=", ")
}
# write.table(CANOEScnv, file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CANOES/CANOEScnv_sample_chr_start_end_del1.dup2_copyNum_gene.txt", row.names=FALSE, sep=",") #quote=c(1:3)???


######################################################################################


# use these gene and GO categories to find genes and GO categories that are enriched in the CNVs but then look below
###########################I think a it would be more telling to identify the overlaps between CNV calls within and between families
###########################quantify the degree of overlap within vs among families 
###########################then classify the genes that show up across families


#maybe use annotatr instead
if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager")
BiocManager::install("annotatr")

library("annotatr")


################################################################################################################
#compare CNV calls
################################################################################################################

##### plan: to create a data.fram comparing the overlap in calls within an individual/sample

for(i in unique(GATKcnv$sample)){                      #i = GATKcnv$sample[1]
A <- makeGRangesFromDataFrame(subset(GATKcnv, GATKcnv$sample == i)) 
B <- makeGRangesFromDataFrame(subset(XHMMcnv, XHMMcnv$sample == i), keep.extra.columns=TRUE)
C <- makeGRangesFromDataFrame(subset(CANOEScnv, CANOEScnv$sample == i), keep.extra.columns=TRUE)
ABlaps <- findOverlaps(A, B)
AClaps <- findOverlaps(A, C)
BClaps <- findOverlaps(B, C)

#olaps is a two-column matrix, indicating which element(s) of A overlap the corresponding elements of B. In the invocation above A and B enter symmetrically, but could be re-ordered if there were restrictions on the type of overlap (argument type, e.g., all of B strictly within A). To find the extent of overlap, I looked at the parallel (element wise) intersection of each overlap

ABsect <- pintersect(A[queryHits(ABlaps)], B[subjectHits(ABlaps)])
ACsect <- pintersect(A[queryHits(AClaps)], C[subjectHits(AClaps)])
BCsect <- pintersect(C[queryHits(BClaps)], C[subjectHits(BClaps)])

##########HOW should I organize this information??????####################

# save(isect, olaps, XHMMcnv, GATKcnv, file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/olaps7.2.2020.RData")
<- data.frame(query=queryHits(olaps), subject=subjectHits(olaps),
           olap_width=width(isect), 
           query_width=width(A)[queryHits(olaps)],
           variantaccession=B$gene[subjectHits(olaps)])
           
           
# create a data.frame with whatever information needed
#### make data.frame of overlapping CNV calls between XHMM and GATK
CNV.GATKvsXHMM <- data.frame(query=queryHits(olaps), subject=subjectHits(olaps),
           olap_width=width(isect), 
           query_width=width(A)[queryHits(olaps)],
           variantaccession=B$gene[subjectHits(olaps)])
####################################
pheno$Unique.CID.CIND[which(pheno$LA)]


##################################### NOT USING THIS, NEED TO SIMPLIFY CALLS TO SUBSET BY SAMPLE/INDIVIDUAL#####################################
GATKvsXHMM <- data.frame(query=queryHits(olaps), subject=subjectHits(olaps),
           olap_width=width(isect), 
           query_width=width(A)[queryHits(olaps)],
           variantaccession=B$gene[subjectHits(olaps)])
# This will be fast for millions of records in A and B.
####################################################################################################################################################


