#Rterm.exe --vanilla

library(Homo.sapiens) 


#####################################################################################################################
# create FBAT input
# load(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/10.3.21.upToAllDataOrganizedByGene.rda")

######### make the map file #############################################################################################################################

# The map file uses the following format:
# marker_name chr# genetic_pos physical_pos sex_link
# The count of the markers and the order in which they are listed in the map file must be the same as in the ped file. Chr# is
# set to 23 for an X-chromosome marker, and 24 for Y.
# Sex_link = 1 if the marker is sex linked, 0 otherwise. If sex_link = 1, fbat will implement an analysis for an x-chromosome
# marker. For autosomal markers, and for markers in the pseudoautosomal region of the x-marker, set sex-link to zero.

# necessary for "between()" function
 library(dplyr)

#changing no.olaps chr# from NA to no.olaps creates an error for IRanges in loops below,
# must remove the sample that had no XHMM and GATK overlaps from running through these loops
overlappingCNVsPostRemoved <- overlappingCNVsPostRemoved[-grep("no.olaps", overlappingCNVsPostRemoved$chr),]

# replace chr numbers with JUST numbers 23 for X, 24 for Y
    l <- strsplit(overlappingCNVsPostRemoved$chr, "chr")
    numb <- sapply(l, "[", 2)
    numb[which(numb=="X")] <- 23
    numb[which(numb=="Y")] <- 24
    overlappingCNVsPostRemoved$chr <- as.numeric(numb)
    
    
map <- as.data.frame(matrix(nrow=0, ncol=5))
colnames(map) <- c("marker_name", "chr", "genetic_pos", "physical_pos", "sex_link")
for (i in unique(overlappingCNVsPostRemoved$chr)){ # i = unique(overlappingCNVsPostRemoved$chr)[10] #overlappingCNVsPostRemoved[which(is.na(overlappingCNVsPostRemoved$chr)),]
    byChr <- subset(overlappingCNVsPostRemoved, overlappingCNVsPostRemoved$chr == i)
        # for each gene on chr i, determine how many nonoverlapping deletions have been identified. 
        # each nonoverlapping deletion will be listed as a different marker
        #clear segs
        segs <- vector()
        # creat vector of genes in unique(unlist(strsplit(byChr$XHMMgene, ", "))) and in G2FamiliesWithG2per$gene # G2FamiliesWithG2per does not have chr info attached (future go back and add it, or now overlap with genes subset to this chr)
        # this is where we will include more genes than just those in 3 families > 2 per family
                limitedGenesInThisChr <- unique(unlist(strsplit(byChr$XHMMgene, ", ")))
        for (j in limitedGenesInThisChr) { # j = limitedGenesInThisChr[5] 
                Ustart <- byChr$GATKstart[grep(j, byChr$XHMMgene)] 
                Uend <- byChr$GATKend[grep(j, byChr$XHMMgene)]
                sample <- byChr$sample[grep(j, byChr$XHMMgene)]
                segs <- cbind(start = as.numeric(Ustart), end = as.numeric(Uend))
                segs <- data.frame(sample = sample, chr = i, start = segs[,1], end = segs[,2], physicalPos = rowMeans(segs)) 
                A <- makeGRangesFromDataFrame(segs, keep.extra.columns=TRUE) 
                            # ABlaps <- findOverlaps(A, invert=TRUE)
                            # ABsect <- pintersect(A[queryHits(ABlaps)], B[subjectHits(ABlaps)])
                w <- A %outside% A
                #initiate and clear imap for each j before running through k
                imap <- as.data.frame(matrix(nrow=0, ncol=5))
                colnames(imap) <- c("marker_name", "chr", "genetic_pos", "physical_pos", "sex_link")    
                for (p in 1:(length(which(w))+1)){ # p = 1 ## intended to be unique non overlapping segments!!!!!!!!!!!!!!!!!
                         if(p > 1) n <- paste(j, p, sep="") else n <- j
                         imap <- rbind(imap, data.frame(
                                       marker_name = n, 
                                       chr = i,
                                       genetic_pos = round(segs$physicalPos[p]), 
                                       physical_pos = round(segs$physicalPos[p]),
                                       sex_link = 0))
                          } # for p
            if(i == 23 | i == 24) sl = 1 else sl = 0
            imap$sex_link <- sl
            map <- rbind(map, imap)
            } # for j
      
       } # for i

# fbat does not want col.names, i was getting error for chr#, because it does not want col.names in input map
colnames(map) <- c("marker_name", "chr#", "genetic_pos", "physical_pos", "sex_link")

write.table(map, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/oneMarker876genes10.7.21.map", quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t")

################
# for the sake of trying, make map and ped with just one gene "HLA-DRB5"
# mapp <- map[grep("HLA-DRB5", map$marker_name),]
# write.table(mapp, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/oneGene10.6.21.map", quote=FALSE, col.names =FALSE, row.names=FALSE, sep="\t")
################


#####################################################################################################################
# use allGenesInG2CIND for all pedigree and affected info (10/3/21 wnt back to add sex info)
#Layout: ".ped"
# (optional)First line: names of all markers in the sequence of the genotype data
# Remaining lines: pid id fid mid sex aff A11 A12 A21 A22
# aff --> 2 = affected, 1 = unaffected, 0 = unknown
# Alleles are represented by positive integers. Use 0 (zero) for missing alleles: allele j of marker i (j = 1, 2;i = 1, 2, . . .)

# length(G2FamiliesWithG2per$gene) # = 197
# G2FamiliesWithG2per <- read.csv(file= "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/G2FamiliesWithG2per.10.4.21.csv")

# map <- read.delim(file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/10.5.21.map")
# nrow(map) # = 876
# make vector for each marker and allele 
###!!!!!!!!! This gene list is the 197 genes in > 2 families AND > 2 ind per family

# because .map and .ped must match in exact names and order, I am going to use the map$marker_name to create the .ped 
# changed map to just be the marker, now making 2 allele columns for each marker in ped # this didn't work: alleles <- paste(map$marker_name, c("_1", "_2"), sep="")
alleles <- vector()
for(i in map$marker_name) { # i= map$marker_name[7]
    alleles <- append(alleles, c(paste(i, "_1", sep=""), paste(i, "_2", sep="")))
    } # for i

ped <- data.frame(matrix(nrow = 0, ncol = 6 + length(alleles)))
colnames(ped) <- c("pid", "id", "fid", "mid", "sex", "aff", alleles)
i = 0
for(s in unique(overlappingCNVsPostRemoved$sample)){ # s = unique(overlappingCNVsPostRemoved$sample)[1]
    i = i + 1
    ped[i,1] <- phenoFam[which(phenoFam$submitted.sample.id == s), "CID"]
    ped[i,2] <- phenoFam[which(phenoFam$submitted.sample.id == s), "CIND"]
    ped[i,3] <- phenoFam[which(phenoFam$submitted.sample.id == s), "CF"]
    ped[i,4] <- phenoFam[which(phenoFam$submitted.sample.id == s), "CM"]
    ped[i,5] <- phenoFam[which(phenoFam$submitted.sample.id == s), "SEX"]
        aff <- phenoFam[which(phenoFam$submitted.sample.id == s), "diagnosis.of.lung.throat.pharynx.larynx.cancer"]
        if(aff) ped[i,6] <- 2 else ped[i,6] <- 0 ### here i could use whether CIND is deceased for 1 if they did not have cancer
        
      # this is where to loop through all genes to fill in genotype information  
      for(g in map$marker_name){   # g =  G2FamiliesWithG2per$gene[6]
                locate <- grepl(g, overlappingCNVsPostRemoved$XHMMgene[which(overlappingCNVsPostRemoved$sample == s)] )
                present <- any(locate)
                cn <- overlappingCNVsPostRemoved$GATKcall.copyNum[which(overlappingCNVsPostRemoved$sample == s)][which(locate)] 
                  col1 <- paste(g, "_1", sep="")
                  col2 <- paste(g, "_2", sep="")
                    if(present && cn == 0) ped[i,col1] <- 2
                    if(present && cn == 1) ped[i,col1] <- 1
                    if(!present) ped[i,col1] <- 0
                   # now for gene_2 (the non-deletion allele)
                    if(present && cn == 0) ped[i,col2] <- 0
                    if(present && cn == 1) ped[i,col2] <- 1
                    if(!present) ped[i,col2] <- 2
                 } # for g   
              cat("individual ", s, " is number ", i, "\n")      
                    
         } # for s 
# replace CID = New with number (242)
max(as.numeric(ped$pid[-grep("New", ped$pid)])) # = 135
ped$pid[grep("New", ped$pid)] <- 242

write.table(ped, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/oneMarkerPerTwoAlleles876genes10.7.21.ped", quote=FALSE, col.names =FALSE, row.names=FALSE, sep="\t")

#####################################################################################################################
# remake and update pheno and pedigree file
load(file = "C:/Users/4wald/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.2.19.2021.rda")
pheno <- read.csv(file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/Pedigrees for WES for John - All Pedigrees.csv")

Phenotype Data File 
First line: names of all traits in the phenotype file
Remaining lines: pid id trait 1 trait 2 ...
# considerusing SRNA (self report nonaffected) and FRNA (fmaily report of nonaffected status) 
# C1/2 --> cancer type 1 or 2 by age at diagnosis # AO1/2 means age at onset of C1/2

phe <- subset(pheno, select = colnames(pheno) %in% c("CID", "CIND", "AFF_ANY_M", "AFF_LT_M1", "AFF-L", "C1", "C2", "SMOKE", "PY", "CYPR", "CC1", "CC2", "AO1", "AO2"))

colnames(phe) <- c("pid", "id", "anyMalignancy", "lungTracheaMalignancy", "C1", "C2", "CC1", "CC2", "ageOnset1", "ageOnset2", "packyears", "smoker")

# replace CID = New with number (242)
# max(as.numeric(phe$pid[-grep("New", phe$pid)])) # = 135
phe$pid[grep("New", phe$pid)] <- 242

# changes 1 (unaffected) under malignancy to 0 for unknown
phe$anyMalignancy[grep(1, phe$anyMalignancy)] <- 0
phe$lungTracheaMalignancy[grep(1, phe$lungTracheaMalignancy)] <- 0

# replaceing "-" in packyears with 0
phe$packyears[grep("-", phe$packyears)] <- 0
phe$ageOnset1[grep("-", phe$ageOnset1)] <- 200

# saving only columns with numbers as values
phe <- phe[,c(1,2,3,4,9,11)]

# making colnames into the the list of traits and include it in the created table
# names prior to removing columns without number values: colnames(phe) <- c("anyMalignancy", "lungTracheaMalignancy", "C1", "C2", "CC1", "CC2", "ageOnset1", "ageOnset2", "packyears", "smoker","","")
colnames(phe) <- c("anyMalignancy", "lungTracheaMalignancy", "ageOnset1", "packyears","","")

write.table(phe, file="C:/Users/4wald/OneDrive - LSUHSC/GELCC/ageOnsetOf200.10.6.21.phe", quote=FALSE, row.names=FALSE, sep="\t")


#####################################################################################################################
input for FBAT

#####################################################################################################################
