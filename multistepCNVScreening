#Rterm.exe --vanilla
# source("https://raw.githubusercontent.com/johnbwaldron/genes/master/convertGenomicRangeToGeneName")
# look here for ideas: https://support.bioconductor.org/p/67118/

# load(file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.2.19.2021.rda")
load(file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.9.20.21.rda")

library(Homo.sapiens)

######## re-create overlaps between GATK and XHMM ONLY, inorder to add more information to the table and subset by del and those held in common

for(i in unique(GATKcnv$sample)){                      #i = GATKcnv$sample[1]
A <- FALSE
B <- FALSE
C <- FALSE

A <- makeGRangesFromDataFrame(subset(GATKcnv, GATKcnv$sample == i), keep.extra.columns=TRUE) 
if(any(XHMMcnv$sample == i)){
    B <- makeGRangesFromDataFrame(subset(XHMMcnv, XHMMcnv$sample == i), keep.extra.columns=TRUE)

    ABlaps <- findOverlaps(A, B)
    ABsect <- pintersect(A[queryHits(ABlaps)], B[subjectHits(ABlaps)])
    ##################################### GATK vs. XHMM CALLS TO SUBSET BY SAMPLE/INDIVIDUAL#####################################
    GATKandXHMM <- data.frame(sample = A$sample[queryHits(ABlaps)],
                chr = as.data.frame(A)$seqnames[queryHits(ABlaps)],
                GATKstart = as.data.frame(A)$start[queryHits(ABlaps)],
                GATKend = as.data.frame(A)$end[queryHits(ABlaps)],
                XHMMstart = as.data.frame(B)$start[subjectHits(ABlaps)],
                XHMMend = as.data.frame(B)$end[subjectHits(ABlaps)],
                query=queryHits(ABlaps), subject=subjectHits(ABlaps),
                olap_width=width(ABsect), 
                query_width=width(A)[queryHits(ABlaps)],
                GATKcall.del_1.dup_2 = as.data.frame(A)$del_1.dup_2[queryHits(ABlaps)],
                gene=A$gene[queryHits(ABlaps)])
                
    write.table(GATKandXHMM, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMM/GATKandXHMM.", i, ".csv", sep=""), row.names=FALSE, sep=",") #quote=c(1:3)???
    } else {
        cat("no.olaps in ", i)
        GATKandXHMM <- data.frame(sample = i,
                chr = "no.olaps",
                GATKstart = "no.olaps",
                GATKend = "no.olaps",
                XHMMstart = "no.olaps",
                XHMMend = "no.olaps",
                query= "no.olaps",
                olap_width="no.olaps", 
                query_width="no.olaps",
                GATKcall.del_1.dup_2 = "no.olaps",
                gene="no.olaps")
        write.table(GATKandXHMM, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMM/GATKandXHMM.", i, ".csv", sep=""), row.names=FALSE, sep=",")
                }

} # end of loop

############################################################
# step 2 in (https://naturarimor.blogspot.com/2021/09/screen-out-cnvs-by-steps-1-must-be.html)
############################################################################################3


match those genes found in those that phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer == TRUE

#create one table with all shared CNV calls
cnvs <- matrix(nrow=0, ncol=12)
cnvs <- as.data.frame(cnvs)
colnames(cnvs) <- c("sample", "chr", "GATKstart", "GATKend", "XHMMstart", "XHMMend", "query", "subject", "olap_width", "query_width", "GATKcall.del_1.dup_2", "gene")

for(i in unique(GATKcnv$sample)){                      #i = GATKcnv$sample[1]
  
  GATKandXHMM <- read.csv(file = paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMM/GATKandXHMM.", i, ".csv", sep=""))
  
  cnvs <- rbind(cnvs, GATKandXHMM)
}

write.table(cnvs, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/compositeOfCNVsCalledByGATKandXHMM", ".csv", sep=""), row.names=FALSE, sep=",")

#cnvs <- read.csv(file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/compositeOfCNVsCalledByGATKandXHMM.csv")
# save(cnvs, pheno, phenoFam, XHMMcnv, GATKcnv, file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.9.20.21.rda")  
  
  
#################### #################### #################### #################### #################### #################### 
#count incidence of gene names given subset based on disease status
#################### #################### #################### #################### #################### #################### 
# subset of those with airway cancer diagnosis

phenotypeD <- subset(cnvs, cnvs$sample %in% phenoFam$submitted.sample.id[which(phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer == TRUE)])

#################### double check subset function ## phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer[which(phenoFam$submitted.sample.id %in% phenotypeD$sample)]

# can subset to only those with 1 for GATKcalle.del_1.dup_2


## need to get rid of gene names repeated in a single individual
# will do so by removing those where subject is not unique for each individual
remove <- vector()
for (i in 2:nrow(phenotypeD)){
    if (phenotypeD$subject[i] == phenotypeD$subject[i-1]){
        remove <- append(remove, i)
        cat("deleting row ", i, '\n')
    }
    } #nrow(phenotypeD) = 2500 --> nrows(phenotyped) = 1552
phenotypeD <- phenotypeD[-remove,]

# can subset to only those with 1 for GATKcall.del_1.dup_2

phenotypeDdel <- subset(phenotypeD, phenotypeD$GATKcall.del_1.dup_2 == 1) #nrow(phenotypeDdel)= 811

#################### double check subset function ## phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer[which(phenoFam$submitted.sample.id %in% phenotype$sample)]

geneIDs <- unlist(strsplit(phenotypeDdel$gene, split = ", ")) 

freq <- table(geneIDs) 
   
#alternative: library(dplyr)
geneIDs %>% 
count(geneIDs)   
group_by(group = cut(age, breaks = seq(0, max(age), 11))) %>%
  summarise(n = n())
   
  # create table of regions identified by both GATK and XHMM. XHMM calls a single CNV where GATK calls several within it. 
  # This table consolidates to the larger call and uses GATK inferences of copynumber. 
  
  # divide into deletions only
  delGATKcnv <- subset(GATKcnv, GATKcnv$del_1.dup_2 == 1)
  delXHMMcnv <- subset(XHMMcnv, XHMMcnv$del_1.dup_2 == 1)
  
  
  sharedRegionGATK <- subset(GATKcnv, GATKcnv$sample == i)[GATKvsXHMM$query, ]
  sharedRegionXHMM <- subset(XHMMcnv, XHMMcnv$sample == i)[GATKvsXHMM$subject, ]
  
  sharedRegionGATK[c(1:5), c(1:6)]
  sharedRegionXHMM[c(1:5), c(1:6)]
  
    A <- makeGRangesFromDataFrame(subset(GATKcnv, GATKcnv$sample == i), keep.extra.columns=TRUE) 
    if(any(XHMMcnv$sample == i)){
      B <- makeGRangesFromDataFrame(subset(XHMMcnv, XHMMcnv$sample == i), keep.extra.columns=TRUE)

      ABlaps <- findOverlaps(A, B)
    t <- as.table(ABlaps)
    inv <- as.table(t(ABlaps))
  }
  
  summaryXHMMGATKoverlap
  
  save(summaryXHMMGATKoverlap, file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/overlappingCallsXHMMandGATK.rda")
  
summary <- matrix(nrow=0, ncol=4)
summary <- as.data.frame(summary)
colnames(summary) <- c("sample", "GATKvsXHMM",  )

for(i in unique(GATKcnv$sample)){                      #i = GATKcnv$sample[1]
A <- FALSE
B <- FALSE
C <- FALSE

A <- makeGRangesFromDataFrame(subset(GATKcnv, GATKcnv$sample == i), keep.extra.columns=TRUE) 
if(any(XHMMcnv$sample == i)){
    B <- makeGRangesFromDataFrame(subset(XHMMcnv, XHMMcnv$sample == i), keep.extra.columns=TRUE)

    ABlaps <- findOverlaps(A, B)
    ABsect <- pintersect(A[queryHits(ABlaps)], B[subjectHits(ABlaps)])
   
   ##################################### GATK vs. XHMM CALLS TO SUBSET BY SAMPLE/INDIVIDUAL#####################################
    GATKvsXHMM <- data.frame(query=queryHits(ABlaps), subject=subjectHits(ABlaps),
                olap_width=width(ABsect), 
                query_width=width(A)[queryHits(ABlaps)],
                variantaccession=B$gene[subjectHits(ABlaps)])
                # This will be fast for millions of records in A and B.
    write.table(GATKvsXHMM, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/comparingAlgorithms/GATKvsXHMM.", i, ".csv", sep=""), row.names=FALSE, sep=",") #quote=c(1:3)???
    }
    

##################################### summary calls #####################################

summary[nrow(summary) + 1, ] <- c(i, nrow(GATKvsXHMM), nrow(XHMMvsCANOES), nrow(GATKvsCANOES)) 
write.table(summary, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/comparingAlgorithms/summaryComparingAlgorithms", ".csv", sep=""), row.names=FALSE, sep=",")

####################################################################################################################################################
    } # end of loop


