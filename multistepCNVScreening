#Rterm.exe --vanilla
# source("https://raw.githubusercontent.com/johnbwaldron/genes/master/convertGenomicRangeToGeneName")
# look here for ideas: https://support.bioconductor.org/p/67118/

# load(file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.2.19.2021.rda")
load(file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.9.20.21.rda")

library(Homo.sapiens)
 
######## re-create overlaps between GATK and XHMM ONLY, inorder to add more information to the table and subset by del and those held in common

for(i in unique(GATKcnv$sample)){                      #i = GATKcnv$sample[1]
A <- FALSE
B <- FALSE
C <- FALSE

A <- makeGRangesFromDataFrame(subset(GATKcnv, GATKcnv$sample == i), keep.extra.columns=TRUE) 
if(any(XHMMcnv$sample == i)){
    B <- makeGRangesFromDataFrame(subset(XHMMcnv, XHMMcnv$sample == i), keep.extra.columns=TRUE)

    ABlaps <- findOverlaps(A, B)
    ABsect <- pintersect(A[queryHits(ABlaps)], B[subjectHits(ABlaps)])
    ##################################### GATK vs. XHMM CALLS TO SUBSET BY SAMPLE/INDIVIDUAL#####################################
    GATKandXHMM <- data.frame(sample = A$sample[queryHits(ABlaps)],
                chr = as.data.frame(A)$seqnames[queryHits(ABlaps)],
                GATKstart = as.data.frame(A)$start[queryHits(ABlaps)],
                GATKend = as.data.frame(A)$end[queryHits(ABlaps)],
                XHMMstart = as.data.frame(B)$start[subjectHits(ABlaps)],
                XHMMend = as.data.frame(B)$end[subjectHits(ABlaps)],
                query=queryHits(ABlaps), subject=subjectHits(ABlaps),
                olap_width=width(ABsect), 
                query_width=width(A)[queryHits(ABlaps)],
                GATKcall.del_1.dup_2 = as.data.frame(A)$del_1.dup_2[queryHits(ABlaps)],
                gene=A$gene[queryHits(ABlaps)])
                
    write.table(GATKandXHMM, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMM/GATKandXHMM.", i, ".csv", sep=""), row.names=FALSE, sep=",") #quote=c(1:3)???
    } else {
        cat("no.olaps in ", i)
        GATKandXHMM <- data.frame(sample = i,
                chr = "no.olaps",
                GATKstart = "no.olaps",
                GATKend = "no.olaps",
                XHMMstart = "no.olaps",
                XHMMend = "no.olaps",
                query= "no.olaps",
                olap_width="no.olaps", 
                query_width="no.olaps",
                GATKcall.del_1.dup_2 = "no.olaps",
                gene="no.olaps")
        write.table(GATKandXHMM, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMM/GATKandXHMM.", i, ".csv", sep=""), row.names=FALSE, sep=",")
                }

} # end of loop

############################################################
# step 2 in (https://naturarimor.blogspot.com/2021/09/screen-out-cnvs-by-steps-1-must-be.html)
############################################################################################3


match those genes found in those that phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer == TRUE

#create one table with all shared CNV calls
cnvs <- matrix(nrow=0, ncol=12)
cnvs <- as.data.frame(cnvs)
colnames(cnvs) <- c("sample", "chr", "GATKstart", "GATKend", "XHMMstart", "XHMMend", "query", "subject", "olap_width", "query_width", "GATKcall.del_1.dup_2", "gene")

for(i in unique(GATKcnv$sample)){                      #i = GATKcnv$sample[1]
  
  GATKandXHMM <- read.csv(file = paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/callsInCommonGATKandXHMM/GATKandXHMM.", i, ".csv", sep=""))
  
  cnvs <- rbind(cnvs, GATKandXHMM)
}

write.table(cnvs, file=paste("C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/compositeOfCNVsCalledByGATKandXHMM", ".csv", sep=""), row.names=FALSE, sep=",")

#cnvs <- read.csv(file="C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/compositeOfCNVsCalledByGATKandXHMM.csv")
# save(cnvs, pheno, phenoFam, XHMMcnv, GATKcnv, file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/CNVsFrom3AlgsAndPhenoAndPhenoFam.9.20.21.rda")  
  
  
#################### #################### #################### #################### #################### #################### 
#count incidence of gene names given subset based on disease status
#################### #################### #################### #################### #################### #################### 
# subset of those with airway cancer diagnosis

phenotypeD <- subset(cnvs, cnvs$sample %in% phenoFam$submitted.sample.id[which(phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer == TRUE)])

#################### double check subset function ## phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer[which(phenoFam$submitted.sample.id %in% phenotypeD$sample)]

# can subset to only those with 1 for GATKcalle.del_1.dup_2


## need to get rid of gene names repeated in a single individual
# will do so by removing those where subject is not unique for each individual
remove <- vector()
for (i in 2:nrow(phenotypeD)){
    if (phenotypeD$subject[i] == phenotypeD$subject[i-1]){
        remove <- append(remove, i)
        cat("deleting row ", i, '\n')
    }
    } #nrow(phenotypeD) = 2500 --> nrows(phenotyped) = 1552
phenotypeD <- phenotypeD[-remove,]

# can subset to only those with 1 for GATKcall.del_1.dup_2

phenotypeDdel <- subset(phenotypeD, phenotypeD$GATKcall.del_1.dup_2 == 1) #nrow(phenotypeDdel)= 811

#################### double check subset function ## phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer[which(phenoFam$submitted.sample.id %in% phenotype$sample)]

####################################################################################################
#################### subset cnvs for those without cancer diagnosis ####################
####################################################################################################
noDiseasePhenotype <- subset(cnvs, cnvs$sample %in% phenoFam$submitted.sample.id[which(phenoFam$diagnosis.of.lung.throat.pharynx.larynx.cancer == FALSE)])

remove <- vector()
for (i in 2:nrow(noDiseasePhenotype)){
    if (noDiseasePhenotype$subject[i] == noDiseasePhenotype$subject[i-1]){
        remove <- append(remove, i)
        cat("deleting row ", i, '\n')
    }
    } #nrow(noDiseasePhenotype) = 6194 --> nrow(noDiseasePhenotype) = 3852
noDiseasePhenotype <- noDiseasePhenotype[-remove,]

# subset to only deletions:
noDiseasePhenotypedel <- subset(noDiseasePhenotype, noDiseasePhenotype$GATKcall.del_1.dup_2 == 1)
####################################################################################################

LCgeneIDs <- unlist(strsplit(phenotypeDdel$gene, split = ", ")) 

geneIDs <- unlist(strsplit(noDiseasePhenotypedel$gene, split = ", ")) 

freq <- table(geneIDs, exclude = "NA") 
LCfreq <- table(LCgeneIDs, exclude = "NA")
 
plot(freq, type="h")
 
 README <- "tables and data created in CNVanalysis/multistepCNVScreening. phenotypeD is subset of cnvs with airway Ca dx. 
 phenotypeDdel is subset of phenotypeD including only GATK calls for deletion. LCfreq is call to table on unlisted gene 
 names inlcuded in phenotypeDdel. noDiseasePhenotype and noDiseasePhenotypedel are subsets of cnv that include CINDs with no
 Ca Dx and only those with deletions, respectively. freq is call to table of unlisted gene names included in noDiseasePhenotypedel."
 
 save(README, cnvs, pheno, phenoFam, XHMMcnv, GATKcnv, phenotypeD, phenotypeDdel, noDiseasePhenotype, noDiseasePhenotypedel, freq, LCfreq, file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/deletionsGeneFreqTables.9.20.21.rda")  
 # load(file = "C:/Users/jwaldr/OneDrive - LSUHSC/GELCC/deletionsGeneFreqTables.9.20.21.rda")
 
 
 #genes in > 10
 
 kableExtra and ggplot2 packages. In the code chunk labelled packages, include the library()
 
 
